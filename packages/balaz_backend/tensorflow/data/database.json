[ 
{ "text": "Further correct and optimize the bus_dma(9) usage of iflib(4): o Correct the obvious bugs in the netmap(4) parts: - No longer check for the existence of DMA maps as bus_dma(9) is used unconditionally in iflib(4) since r341095. - Supply the correct DMA tag and map pairs to bus_dma(9) functions (see also the commit message of r343753). - In iflib_netmap_timer_adjust(), add synchronization of the TX descriptors before calling the ift_txd_credits_update method as the latter evaluates the TX descriptors possibly updated by the MAC. - In _task_fn_tx(), wrap the netmap(4)-specific bits in #ifdef DEV_NETMAP just as done in _task_fn_admin() and _task_fn_rx() respectively. o In iflib_fast_intr_rxtx(), synchronize the TX rather than the RX descriptors before calling the ift_txd_credits_update method (see also above). o There's no need to synchronize an RX buffer that is going to be recycled in iflib_rxd_pkt_get(), yet; it's sufficient to do that as late as passing RX buffers to the MAC via the ift_rxd_refill method. Hence, combine that synchronization with the synchronization of new buffers into a common spot in _iflib_fl_refill(). o There's no need to synchronize the RX descriptors of a free list in preparation of the MAC updating their statuses with every invocation of rxd_frag_to_sd(); it's enough to do this once before handing control over to the MAC, i. e. before calling ift_rxd_flush method in _iflib_fl_refill(), which already performs the necessary synchronization. o Given that the ift_rxd_available method evaluates the RX descriptors which possibly have been altered by the MAC, synchronize as appropriate beforehand. Most notably this is now done in iflib_rxd_avail(), which in turn means that we don't need to issue the same synchronization yet again before calling the ift_rxd_pkt_get method in iflib_rxeof(). o In iflib_txd_db_check(), synchronize the TX descriptors before handing them over to the MAC for transmission via the ift_txd_flush method. o In iflib_encap(), move the TX buffer synchronization after the invocation of the ift_txd_encap() method. If the MAC driver fails to encapsulate the packet and we retry with a defragmented mbuf chain or finally fail, the cycles for TX buffer synchronization have been wasted. Synchronizing afterwards matches what non-iflib(4) drivers typically do and is sufficient as the MAC will not actually start with the transmission before - in this case - the ift_txd_flush method is called. Moreover, for the latter reason the synchronization of the TX descriptors in iflib_encap() can go as it's enough to synchronize them before passing control over to the MAC by issuing the ift_txd_flush() method (see above). o In iflib_txq_can_drain(), only synchronize TX descriptors if the ift_txd_credits_update method accessing these is actually called.", "position": "database" },
{ "text": "o By popular demand import getent(1) utility: a program retrieves and displays entries from the administrative database specified by database, using the lookup order specified in nsswitch.conf(5).", "position": "database" },
{ "text": "It was possible for an unprivileged user to tie up the password information (no one else can vipw(8), chpass(1), or even passwd(1)), either on purpose or by accident, until an administrator manually intervened. Instead, do not lock the master.passwd file while a user is editing his information. But once we go to write the new information, check that the modified user's information has not changed in the password database since we started. Abort the changes if it has.", "position": "database" },
{ "text": "No feedback when startup fails because other instance runs as admin (fixes #38858)", "position": "database" },
{ "text": "Handle VF resets. When the PF changes VF settings, the VF will be reset, which means the driver has to set everything up again from scratch. When we detect a reset (identified by an interrupt with ICR 0xdeadbeef), schedule a task that sets up the admin queue, establishes communication with the PF, and configures the rx/tx queues again. The interface is taken down during the reset process.", "position": "database" },
{ "text": "change bgpd's control socket from /var/run/bgpd.sock to /var/run/bgpd.sock.<rdomain> in both bgpd and bgpctl. makes life easier for admins. ok phessler, claudio, henning, feedback from Job Snijders", "position": "database" },
{ "text": "Remove default of AuthorizedCommandUser. Administrators are now expected to explicitly specify a user. feedback and ok markus@", "position": "database" },
{ "text": "vxlan: don't flush static fdb entries on admin down", "position": "database" },
{ "text": "V4L/DVB (5163): Add checks for CAP_SYS_ADMIN to VIDIOC_DBG_G_REGISTER", "position": "database" },
{ "text": "Create new errcode for recovery conflict caused by db drop on master. Previously reported as ERRCODE_ADMIN_SHUTDOWN, this case is now reported as ERRCODE_T_R_DATABASE_DROPPED. No message text change. Unlikely to happen on most servers, so low impact change to allow session poolers to correctly handle this situation.", "position": "database" },
{ "text": "Rename miscadmin.h's PG_VERSIONSTR macro to PG_BACKEND_VERSIONSTR to make it a bit clearer what it is, and get rid of duplicate definitions in initdb and pg_ctl.", "position": "database" },
{ "text": "Make it possible to run initdb from an admin account on Windows, by giving up admin privileges (only works if newer than NT4).", "position": "database" },
{ "text": "Andreas Pflug wrote: From an idea of Bruce, the attached patch implements the function pg_tablespace_databases(oid) RETURNS SETOF oid which delivers as set of database oids having objects in the selected tablespace, enabling an admin to examine only the databases affecting the tablespace for objects instead of scanning all of them.", "position": "database" },
{ "text": "Cause standalone backend (including bootstrap case) to read the GUC config file if it exists. This was already discussed as being a good idea, and now seems the cleanest way to deal with initdb-time failures on machines with small SHMMAX. (The submitted patches instead modified initdb.sh to pass the correct sizing parameters, but that would still leave standalone backends prone to failure later. An admin who needs to use a standalone backend has enough trouble already, he shouldn't have to manually configure its shmem settings...)", "position": "database" },
{ "text": "Enhance the description of user and database management. Reduce the number of forward references in the admin guide.", "position": "database" },
{ "text": "Add example of using 'sameuser' followed by 'all' pg_hba records to enforce a limit on who can connect to databases other than their own. From a recent discussion in pg-admin.", "position": "database" },
{ "text": "Clean up treatment of creating/dropping databases in User's Guide and Admin Guide. Move discussion of template databases out of footnotes in CREATE DATABASE ref page and into a section of the Admin Guide. Clean up various obsolete claims, do some copy-editing.", "position": "database" },
{ "text": "Allow a non-superuser database owner to vacuum all tables in his database, including system catalogs (but not the shared catalogs, since they don't really belong to his database). This is per recent mailing list discussion. Clean up some other code that also checks for database ownerness by introducing a test function is_dbadmin().", "position": "database" },
{ "text": "New and revised material for Admin guide, re backup & restore and database management", "position": "database" },
{ "text": "Remove pg_vlock locking from VACUUM, allowing multiple VACUUMs to run in parallel --- and, not incidentally, removing a common reason for needing manual cleanup by the DB admin after a crash. Remove initial global delete of pg_statistics rows in VACUUM ANALYZE; this was not only bad for performance of other backends that had to run without stats for a while, but it was fundamentally broken because it was done outside any transaction. Surprising we didn't see more consequences of that. Detect attempt to run VACUUM inside a transaction block. Check for query cancel request before starting vacuum of each table. Clean up vacuum's private portal storage if vacuum is aborted.", "position": "database" },
{ "text": "* Got entirely rid of path.py. * Many modules: fixes for new, stricter, argument passing rules (most changes were automatic ones -- not all of this is tested!). * gwin.py: now uses mainloop.py for its main loop and window admin. * mainloop.py: always call dispatch() with event as a tuple! * Fix bug in pdb's 'clear' command -- don't set the bpt but clear it!", "position": "database" },
{ "text": "Cleans up some of the strings that appear in administrative templates, per feedback from tech writers.", "position": "database" },
{ "text": "odbc installation requires admin so add to windows prechecks", "position": "database" },
{ "text": "[Tooling][libclang] Remove unused CompilationDatabase::MappedSources", "position": "database" },
{ "text": "lld Fixups for TypeDatabase changes.", "position": "database" },
{ "text": "[CodeView] Reserve TypeDatabase records up front.", "position": "database" },
{ "text": "[llvm-pdbdump] Only build the TypeDatabase if necessary.", "position": "database" },
{ "text": "[clangd] Remove ASTUnits for closed documents and cache CompilationDatabase per directory.", "position": "database" },
{ "text": "Make home_directory look in the password database in addition to $HOME.", "position": "database" },
{ "text": "[CodeView] Finish decoupling TypeDatabase from TypeDumper.", "position": "database" },
{ "text": "[CodeView] Add TypeDatabase class.", "position": "database" },
{ "text": "Compilation database test: don't try to output to CWD", "position": "database" },
{ "text": "Allow clang to write compilation database records.", "position": "database" },
{ "text": "Extend CompilationDatabase by a field for the output filename", "position": "database" },
{ "text": "Fix json compilation database syntax on non-Windows.", "position": "database" },
{ "text": "[Tooling] Parse compilation database command lines on Windows.", "position": "database" },
{ "text": "[include-fixer] Autodetect yaml databases in parent directories.", "position": "database" },
{ "text": "[include-fixer] Add Yaml database integration.", "position": "database" },
{ "text": "Don't search compilation database in explain-check, fixing buildbot test failure.", "position": "database" },
{ "text": "Clean up the include fixer 'driver' a bit and make the database configurable.", "position": "database" },
{ "text": "Don't search compilation database in explain-check test.", "position": "database" },
{ "text": "D17487: [analyzer][scan-build-py] flag filter modification for compilation database creation", "position": "database" },
{ "text": "[clang-tidy] Fix a crash issue when clang-tidy runs with compilation database.", "position": "database" },
{ "text": "Generate a clang CompilationDatabase when running CMake", "position": "database" },
{ "text": "[tooling] Provide the compile commands of the JSON database in the order that they were provided in the JSON file.", "position": "database" },
{ "text": "Add structed way to express command line options in the compilation database.", "position": "database" },
{ "text": "Silence tools/clang/lib/Tooling/CompilationDatabase.cpp:328:12: warning: ‘clang::tooling::JSONAnchorDest’ defined but not used [-Wunused-variable] from gcc 5.1.", "position": "database" },
{ "text": "Query CompilationDatabase right before running each compilation.", "position": "database" },
{ "text": "Sure-up MemoryBuffer ownership in JSONCompilationDatabase's ctor.", "position": "database" },
{ "text": "CompilationDatabase: Sure-up ownership of compilation databases using std::unique_ptr", "position": "database" },
{ "text": "Use CommonOptionsParser in clang-query. This fixes its support of the fixed compilation database and makes it behave consistently with other clang tools.", "position": "database" },
{ "text": "[libclang/python] Add CompilationDatabase.getAllCompileCommands to the python bindings.", "position": "database" },
{ "text": "Relax some preconditions for using FixedCompilationDatabase.", "position": "database" },
{ "text": "Fixed test for compilation databases. Fixed test that was previously failing due to concurrency.", "position": "database" },
{ "text": "Added tests for testing migration of files in a compilation database.", "position": "database" },
{ "text": "Fix for removing not included files from a compilation database.", "position": "database" },
{ "text": "Transform files in a compilation database if no sources are provided.", "position": "database" },
{ "text": "Use -std=c++11 when no compilation database is provided", "position": "database" },
{ "text": "Make clang tools ignore -fcolor-diagnostics and -fdiagnostics-color retrieved from the compilation database.", "position": "database" },
{ "text": "Fix spurious output in JSONCompilationDatabase", "position": "database" },
{ "text": "[c-index-test] Introduce '-index-compile-db' which accepts a compilation database file and does an '-index-file' for all compile commands in the database.", "position": "database" },
{ "text": "Introduce CompilationDatabase::getAllCompileCommands() that returns all compile commands of the database and expose it via the libclang API.", "position": "database" },
{ "text": "Only report first error when no compilation database is found.", "position": "database" },
{ "text": "CompilationDatabaseTest: Fix another Windows path issue.", "position": "database" },
{ "text": "CompilationDatabase: Use //net paths for tests, as they should be considered absolute on all platforms.", "position": "database" },
{ "text": "Support symlinks and relative paths in complilation databases.", "position": "database" },
{ "text": "Use LLVM's plugin registry to enable registering new compilation databases. Move JSONCompilationDatabase.h to its own files and register it as plugin.", "position": "database" },
{ "text": "Added code to let the user specify a compilation database on the command line", "position": "database" },
{ "text": "Add a custom initialize hook for clang tools + minor fixes in CustomCompilationDatabase.h", "position": "database" },
{ "text": "Allows retrieving all files in a CompilationDatabase.", "position": "database" },
{ "text": "Add a hook to supply a custom CompilationDatabase. To add a custom CompilationDatabase, make it implement findCompilationDatabaseForDirectory in CustomCompilationDatabase.h and set USE_COSTUM_COMPILATION_DATABASE.", "position": "database" },
{ "text": "Adds support for auto-detection of compilation databases, looking in a directory and all its parents.", "position": "database" },
{ "text": "Add documentation for the JSON compilation database format.", "position": "database" },
{ "text": "Fixes crasher bug in JSONCompilationDatabase for invalid input.", "position": "database" },
{ "text": "Adds a FixedCompilationDatabase to be able to specify tool parameters at the command line.", "position": "database" },
{ "text": "Switches the JSONCompilationDatabase to use the YAML parser. This will allow us to delete the JSON parser from llvm.", "position": "database" },
{ "text": "Another installment on debug mode. This addresses list. However this should be considered a temporary state. The API of the debug database and how vector and list use it, is unsatisfactory at the moment. It is both inefficient and overly verbose. I wanted to get this functionality checked in though. In the next day or so I'll refactor what is there in an attempt to streamline things.", "position": "database" },
{ "text": "Remove MetadataBase class because it is not adding significant value.", "position": "database" },
{ "text": "Fix MetadataBase::classof(). Thanks Benjamin Kramer!", "position": "database" },
{ "text": "Derive MDNode from MetadataBase instead of Constant. Emit MDNodes into METADATA_BLOCK in bitcode file.", "position": "database" },
{ "text": "Introduce MetadataBase, a base class for MDString and MDNode. Derive MDString directly from MetadataBase. Introduce new bitcode block to hold metadata.", "position": "database" },
{ "text": "Fixup the rest of the trivial cases of the codegen of volatile. If any body can spot codegen bugs with volatile, or knows of any in the bug database, let me know.", "position": "database" },
{ "text": "use the StmtNodes.def database to eliminate redundant code.", "position": "database" },
{ "text": "Adding target triplet to be passed to database.", "position": "database" },
{ "text": "These changes reflect the changes in the database for how tests are stored and bring the handing of dejagnu tests into compliance with this new scheme.", "position": "database" },
{ "text": "Make the llvm-config library dependency database depend on all of the libraries.", "position": "database" },
{ "text": "Move support for building tags database from Makefile.rules to Makefile, because it's only used in the top-level directory.", "position": "database" },
{ "text": "Fixed the location of the expectations file. Added the registration of the LLVM Database class.", "position": "database" },
{ "text": "Changed all of these tests to be TestRunner tests (or, at least they can be TestRunner tests). This makes creating the new test database class easier to implement.", "position": "database" },
{ "text": "Renamed these tests so that they don't contain extra periods. This interferes with QMTest and the new test database.", "position": "database" },
{ "text": "fix memory leak if GeoIP City database was used", "position": "database" },
{ "text": " InMemoryCatalog.tableExists should not fail if database doesn't exist", "position": "database" },
{ "text": " Support analyze all tables in a specific database", "position": "database" },
{ "text": " Add a legacy config to restore the output schema of SHOW DATABASES", "position": "database" },
{ "text": " Improve the error message from resolving of v1 database name", "position": "database" },
{ "text": " Support REGEXP_LIKE for consistent with mainstream databases", "position": "database" },
{ "text": " Extend the function of decode so as consistent with mainstream databases", "position": "database" },
{ "text": " Fix bug of Count so as consistent with mainstream databases", "position": "database" },
{ "text": "[DOCS] Fix the comment for `SQLContext.tables()` and mention the `database` column", "position": "database" },
{ "text": "[TEST] Hive ThriftServer JDBC Database MetaData API Behavior Auditing", "position": "database" },
{ "text": "[TEST] Make all the database versions up-to-date for integration tests", "position": "database" },
{ "text": " Proper base path for database/table location when it is a relative path", "position": "database" },
{ "text": "[TEST] TestHiveQueryExecution should respect database when creating table", "position": "database" },
{ "text": " Handle database and namespace exceptions in catalog.isView", "position": "database" },
{ "text": " Support ALTER DATABASE SET OWNER syntax", "position": "database" },
{ "text": " Update SqlBase.g4 to combine namespace and database tokens", "position": "database" },
{ "text": " The ownership of a database should be respected", "position": "database" },
{ "text": " ALTER DATABASE (SET LOCATION) should look up catalog like v2 commands", "position": "database" },
{ "text": " ALTER DATABASE (SET DBPROPERTIES) should look up catalog like v2 commands", "position": "database" },
{ "text": " DESC DATABASE should look up catalog like v2 commands", "position": "database" },
{ "text": " Case-insensitive database URLs in JdbcDialect", "position": "database" },
{ "text": "[FOLLOW UP] Reimplement UnsafeExternalRowSorter in database style iterator", "position": "database" },
{ "text": " Support ALTER DATABASE SET LOCATION", "position": "database" },
{ "text": "[SQL] Document USE DATABASE in SQL Reference", "position": "database" },
{ "text": "[DOC] Document CREATE DATABASE statement in SQL Reference", "position": "database" },
{ "text": " Document DROP DATABASE statement in SQL Reference", "position": "database" },
{ "text": " Implement SHOW DATABASES for Data Source V2 Tables", "position": "database" },
{ "text": "[SQL] Document DESCRIBE DATABASE statement in SQL Reference", "position": "database" },
{ "text": "][SQL] Document SHOW DATABASES in SQL Reference", "position": "database" },
{ "text": "][SQL] Document ALTER DATABASE command", "position": "database" },
{ "text": " Show global temporary view in database tool", "position": "database" },
{ "text": " Avoid hard-coded config: spark.sql.globalTempDatabase", "position": "database" },
{ "text": " Make optional clauses order insensitive for CREATE DATABASE/VIEW SQL statement", "position": "database" },
{ "text": " The JDBC 'query' option doesn't work for Oracle database", "position": "database" },
{ "text": "[MINOR][SQL] Put the grammar of database together, because this is good for maintenance and readability.", "position": "database" },
{ "text": "ON] Drop the created database after the test in test_session", "position": "database" },
{ "text": " Invalidate tables in case of DROP DATABASE CASCADE", "position": "database" },
{ "text": "[MINOR][SQL] Fix typo in CTAS plan database string", "position": "database" },
{ "text": " skip when setting the same current database in HiveClientImpl", "position": "database" },
{ "text": " move setCurrentDatabase from HiveExternalCatalog to HiveClientImpl", "position": "database" },
{ "text": " show databases like command' can remove the like keyword", "position": "database" },
{ "text": " Fix NullPointerException when DESC a database with NULL description", "position": "database" },
{ "text": " Add new alter table and alter database related ExternalCatalogEvent", "position": "database" },
{ "text": "[TEST] withDatabase` should drop database with CASCADE", "position": "database" },
{ "text": " Support changing database in HiveClient", "position": "database" },
{ "text": " Unable to call the function registered in the not-current database", "position": "database" },
{ "text": " Adds option to the JDBC data source write for user to specify database column type for the create table", "position": "database" },
{ "text": "[TEST-MAVEN] SessionCatalog reset need to set the current database of ExternalCatalog", "position": "database" },
{ "text": "] Use the database after Hive's current Database is dropped", "position": "database" },
{ "text": " location for table/partition/database should be java.net.URI", "position": "database" },
{ "text": "ServiceWorker: Directly delete database directory instead of leveldb::DestroyDB", "position": "database" },
{ "text": "Remove persistent notifications from the database when they close.", "position": "database" },
{ "text": "Actually activate the Notification Database bloom filter.", "position": "database" },
{ "text": "Integrate the notification database with the normal code path.", "position": "database" },
{ "text": "Add favicon database histograms to UMA.", "position": "database" },
{ "text": "The notification database should have a bloom filter policy.", "position": "database" },
{ "text": "Destroy the notification database when corruption occurs.", "position": "database" },
{ "text": "The notification database should be able to read or delete multiple items.", "position": "database" },
{ "text": "Hook the notification database up with the StoragePartition.", "position": "database" },
{ "text": "Unregister with push service and SW database when permission is lost.", "position": "database" },
{ "text": "Revert of Instrumenting opening password database to find jank (patchset #1 id:1 of https://codereview.chromium.org/807263003/)", "position": "database" },
{ "text": "ServiceWorker: ReadRegistration should return NOT_FOUND when the database is not initialized", "position": "database" },
{ "text": "Use server cards from database in Autofill dropdown.", "position": "database" },
{ "text": "Instrumenting opening password database to find jank.", "position": "database" },
{ "text": "IndexedDB: Eliminated false detection of database corruption.", "position": "database" },
{ "text": "[Password Manager] Update SQL database version in response to rollback", "position": "database" },
{ "text": "Tentative fix of a crash in Oilpan GC after a database thread termination.", "position": "database" },
{ "text": "DatabaseBackend should not post a task to an already terminated database thread", "position": "database" },
{ "text": "Revert of DatabaseBackend should not post a task to an already terminated database thread (patchset #4 id:60001 of https://codereview.chromium.org/596083005/)", "position": "database" },
{ "text": "[SyncFS] Make on-disk version default for metadata database index", "position": "database" },
{ "text": "IndexedDB: Decode correct int type for database name->id map", "position": "database" },
{ "text": "IndexedDB: Measure the total database open time.", "position": "database" },
{ "text": "IndexedDB: Database enumeration should not include failed opens", "position": "database" },
{ "text": "PasswordStoreMac should notify Sync about orphaned database entries.", "position": "database" },
{ "text": "[SyncFS] Replace leveldb classes with LevelDBWrapper. In most files under sync_file_system/drive_backend/, leveldb::DB and leveldb::WriteBatch are replaced with LevelDBWrapper to have a database transparent.", "position": "database" },
{ "text": "[safe browsing] Remove most filename storage in database object.", "position": "database" },
{ "text": "Extract protobuf database into a new 'leveldb_proto' component", "position": "database" },
{ "text": "NSSDecryptor::ReadAndParseSignons() - improved password form scheme detection, when database row has non-empty realm, assume autofill::PasswordForm::SCHEME_BASIC.", "position": "database" },
{ "text": "[SyncFS] Fix database path of MetadataDatabase", "position": "database" },
{ "text": "Eliminate the archived history database and clean up related code.", "position": "database" },
{ "text": "[SyncFS] Make routines using metadata database run asynchronously. Some methods not used in product code keep to call GetMetadataDatabase directly.", "position": "database" },
{ "text": "[Android] Only update safe-browsing database on WiFi", "position": "database" },
{ "text": "Do not CHECK on the result of Sql::Statement::Run. It may fail on database errors. We should not crash Chrome for such errors. The CHECK is replaced by a log message. We already handles database error in general in OnDatabaseError, so no additional error handling is needed.", "position": "database" },
{ "text": "ServiceWorker: Consolidate database state members for cleanup", "position": "database" },
{ "text": "ServiceWorker: Database functions should return status code instead of boolean", "position": "database" },
{ "text": "ServiceWorker: Create database on disk", "position": "database" },
{ "text": "ServiceWorker: Add test for database schema version", "position": "database" },
{ "text": "[safe-browsing] Database full hash matches like prefix match.", "position": "database" },
{ "text": "Add the backchannel for Blobs to be received into Blink from the database backend.", "position": "database" },
{ "text": "Correctly update in-memory database when history archiving runs.", "position": "database" },
{ "text": "Oilpan: Move database closing task in ~DatabaseBackendSync to a pre-finalization hook with HeapHashMap.", "position": "database" },
{ "text": "Handle cases when user cert database has NULL slots", "position": "database" },
{ "text": "Remove PurgeMemory() from the safe browsing database manager.", "position": "database" },
{ "text": "Oilpan: Prepare to move DatabaseBackendBase and its subclasses to Oilpan heap, and add GC support to database threads.", "position": "database" },
{ "text": "IndexedDB: Remove invalid DCHECK that database name is non-empty", "position": "database" },
{ "text": "Rewrite instructions on how to dump sync database for unit test.", "position": "database" },
{ "text": "[SyncFS] Check MetadataDatabase availability before database operation", "position": "database" },
{ "text": "Add the database field to require additional auth for autofilling passwords.", "position": "database" },
{ "text": "Removes some dead database code", "position": "database" },
{ "text": "IndexedDB: Force a database compaction after a database is deleted", "position": "database" },
{ "text": "AppCache: Run a quick integrity check on the sqlite database when opening. If the test fails, delete the appcache directory and start afresh.", "position": "database" },
{ "text": "IndexedDB: Failed open calls leak database objects", "position": "database" },
{ "text": "[Autofill] Update the Autofill database schema for i18n.", "position": "database" },
{ "text": "Metrics database for tracking precache statistics.", "position": "database" },
{ "text": "IndexedDB: Don't leak database proxy objects", "position": "database" },
{ "text": "Close QUIC session when the cert database changes", "position": "database" },
{ "text": "[sql] Rearrange TopSites database code in prep for recovery code.", "position": "database" },
{ "text": "[sync] Limit DirectoryBackingStore database cache size.", "position": "database" },
{ "text": "Mostly integrate new malware IP blacklist with the csd client. When CL/32683003 is submitted we just need to change the call in the database manager.", "position": "database" },
{ "text": "Retry: Prepopulate primary origin's directory database if possible.", "position": "database" },
{ "text": "Provide testing overrides for iTunes and iPhoto database locations (try2).", "position": "database" },
{ "text": "Prepopulate primary origin's directory database if possible.", "position": "database" },
{ "text": "Provide testing overrides for iTunes and iPhoto database locations.", "position": "database" },
{ "text": "IndexedDB: Combine two transactions used during database creation", "position": "database" },
{ "text": "[chromedriver] Return false for databaseEnabled as database is not supported yet.", "position": "database" },
{ "text": "Don't reset the database when there was an I/O error.", "position": "database" },
{ "text": "Deprecate old Favicons database versions.", "position": "database" },
{ "text": "Histograms for Favicon database recovery code.", "position": "database" },
{ "text": "Add database for Dom Distiller articles", "position": "database" },
{ "text": "[Activity log] Update arg_url database and args whitelist", "position": "database" },
{ "text": "[Activity log] Make database writes in counting policy more robust", "position": "database" },
{ "text": "[SyncFS] Implement Database initialization part of SyncEngineInitializer", "position": "database" },
{ "text": "Add Shortcuts database histogram.", "position": "database" },
{ "text": "This implements the chrome.activityLogPrivate.getExtensionActivites method, which lets the Watchdog app look up history out of the database according to a set of filter parameters.", "position": "database" },
{ "text": "Compressed activity log database storage", "position": "database" },
{ "text": "Wrap extension activity log database flushing in a database transaction", "position": "database" },
{ "text": "Extension activity log database refactoring (step 4)", "position": "database" },
{ "text": "IndexedDB: Drop database backend reference after connection is closed", "position": "database" },
{ "text": "Extension activity log database refactoring (step 3)", "position": "database" },
{ "text": "Extension activity log database refactoring (step 2)", "position": "database" },
{ "text": "[sql] Allow restricting database to user read access.", "position": "database" },
{ "text": "Extension activity log database refactoring (step 1)", "position": "database" },
{ "text": "Fixing destruction order in login database unit tests", "position": "database" },
{ "text": "[SyncFS] Move metadata database protobufs to drive_backend/", "position": "database" },
{ "text": "Fix directory database handling in ObfuscatedFileUtil", "position": "database" },
{ "text": "[sql] Static helper to delete database and all associated files.", "position": "database" },
{ "text": "Use chromium logic for database identifier<->origin conversions", "position": "database" },
{ "text": "Port database identifier <-> origin conversions to chromium", "position": "database" },
{ "text": "Add more tests for hostname encoding in database identifiers", "position": "database" },
{ "text": "Prepopulate directory database for isolated origins", "position": "database" },
{ "text": "[SyncFileSystem][Clean up] Unify database write to WriteBatch", "position": "database" },
{ "text": "Implement special origin database handling for Isolated Apps", "position": "database" },
{ "text": "[Telemetry] Remove database page_cycler suites.", "position": "database" },
{ "text": "IndexedDB: Fix database callback tracking/cleanup on close", "position": "database" },
{ "text": "Delete PerformanceMonitor database on background thread", "position": "database" },
{ "text": "Adds database methods needed to track amount of time pages are actively viewed. If we decide we want this functionality I'll fold it into segment_usage, but for now I'm putting it in a separate table so it's easier to migrate.", "position": "database" },
{ "text": "Add UMA statistics for tracking session storage database opening failures.", "position": "database" },
{ "text": "Sync FileSystem: Update metadata database even when the file is not modified.", "position": "database" },
{ "text": "Ensure database is destroyed when sst files are missing.", "position": "database" },
{ "text": "iOS and non iOS use different decoder for SkBitmap to PNG. Currently: - Sync sends the favicon PNG data to the history database - The history database sends a notification (indirectly) to sync that its favicon data has changed. In the process of the 'updated data' being sent to sync, the PNG data is decoded to ImageSkia and reencoded to PNG. Sync receives the reencoded data.", "position": "database" },
{ "text": "Preserve the PNG data from the database if possible in FaviconUtil::SelectFaviconFramesFromPNGs pt1", "position": "database" },
{ "text": "Saves activity log calls into a database. Database interaction is loosely modeled after how history and bookmarks are saved, although I am not currently archiving the log after 3mo.", "position": "database" },
{ "text": "Revert 177235 > Saves activity log calls into a database. Database interaction is loosely modeled after how history and bookmarks are saved, although I am not currently archiving the log after 3mo. > > Also gives the activity log some structure in preparation for the new UI. > > BUG=161002 > > Review URL: https://chromiumcodereview.appspot.com/11421192", "position": "database" },
{ "text": "Raze the database if the favicon table has an invalid structure", "position": "database" },
{ "text": "Fix the Database manager assert, again.", "position": "database" },
{ "text": "Do not load extension system in the Profile import process. Also, defer loading component extensions with background pages until the import process is complete, so that the renderer host does not compete for the database lock.", "position": "database" },
{ "text": "Add diagnostics to debug database open problems.", "position": "database" },
{ "text": "Fix the reverted patch from CL 11366042 by addressing lifetimes/access to ui and database managers.", "position": "database" },
{ "text": "Revert 168549 - Revert 167701 - Make LeveldbValueStore open its leveldb database lazily.", "position": "database" },
{ "text": "Revert 167701 - Make LeveldbValueStore open its leveldb database lazily.", "position": "database" },
{ "text": "Make LeveldbValueStore open its leveldb database lazily.", "position": "database" },
{ "text": "Add UMA histogram to see how widespread it is for users to have a favicons database with a missing column.", "position": "database" },
{ "text": "Importing the USB IDs database into third_party.", "position": "database" },
{ "text": "Reset the meta_table_ when closing the database handle.", "position": "database" },
{ "text": "Raze history database if corrupted", "position": "database" },
{ "text": "Using the on disk history database instead of the in memory one in the ResourcePrefetchPredictor.", "position": "database" },
{ "text": "Add LocalFileChangeTracker database to record non-synced dirty files", "position": "database" },
{ "text": "Revert 157723 - Revert 157713 - Make database failures in LeveldbValueStore more descriptive. Reason: memory leak. Reason: actually, I just need to update a suppression.", "position": "database" },
{ "text": "Revert 157713 - Make database failures in LeveldbValueStore more descriptive. Reason: memory leak.", "position": "database" },
{ "text": "Make database failures in LeveldbValueStore more descriptive.", "position": "database" },
{ "text": "Fix HistoryBackend::UpdateFaviconMappingsAndFetchImpl when database is not valid.", "position": "database" },
{ "text": "Modifies history backend to be able to take advantage of storing the pixel size of favicons into the database. Changed FaviconData to allow retrieving favicon bitmaps for multiple pixel sizes from the database simultaneously. Added History::GetFavicons() and History::GetFaviconsForURL() to do this. Changed History::SetFavicon() to History::SetFavicons() such that multiple favicon bitmaps for a page URL can be set simultaneously.", "position": "database" },
{ "text": "Changes favicon database to support storing bitmaps of different sizes for the same icon_url.", "position": "database" },
{ "text": "Fix error checking in VisitedLinkMaster. Avoid crashes when visited links database cannot be opened.", "position": "database" },
{ "text": "Adds a method to the Performance Monitor Database to fetch the most recent metric.", "position": "database" },
{ "text": "Add deletion timing test. Add a cursor-read-random-write test that writes back to the same store. Turn on database deletion for all other perf tests [although the time's not counted for tests other than the deletion test].", "position": "database" },
{ "text": "Chrome Performance Monitor: Moved MetricDetails lookup to metric_details.*. Database keys and MetricDetails lookups are now made through the MetricType enum.", "position": "database" },
{ "text": "Performance Monitor Database now accepts start times during current active interval.", "position": "database" },
{ "text": "Chrome Performance Monitor Database -- Metrics", "position": "database" },
{ "text": "Revert 142563 - Handle sync database corruption with re-download", "position": "database" },
{ "text": "Chrome Performance Monitor Database -- Events", "position": "database" },
{ "text": "Handle sync database corruption with re-download", "position": "database" },
{ "text": "When the Google base URL changes and causes keyword updates, save those to the database and send them to sync. Note that even if the database had the wrong keyword, a TemplateURL would get reset to the correct keyword on next load (in the model, not in the database), so this is mostly useful for keeping state as consistent as possible rather than preventing visible local problems.", "position": "database" },
{ "text": "Fix the indexed database build for GTK+.", "position": "database" },
{ "text": "Double-check safe-browsing database validity on update failure.", "position": "database" },
{ "text": "Upgrade the history database to version 23", "position": "database" },
{ "text": "Add database recovery for FileSystemDirectoryDatabase.", "position": "database" },
{ "text": "Change 9789001: attempt #3 after fixing the problems with linux Created by Wei Li: https://chromiumcodereview.appspot.com/9789001/ Changes to add duration into history database. This completes Issue 9605037 which can compute suggestion sites based on time slicing as well as visit duration. A new database table was added for those new fields we may need to experiment on.", "position": "database" },
{ "text": "Revert 130675 - Reapply Wei Li's patch Committing: Changes to add duration into history database. This completes Issue 9605037 which can compute suggestion sites based on time slicing as well as visit duration. A new database table was added for those new fields we may need to experiment on. Original cl: https://chromiumcodereview.appspot.com/9789001/ comment: HistoryProfileTest.TypicalProfileVersion fails because of the trybots inability to patch the History file - it runs fine locally. Created by Wei Li weili@chromium.org", "position": "database" },
{ "text": "Disable database test for testDeleteAndUpdateDatabases.", "position": "database" },
{ "text": "Reapply Wei Li's patch Committing: Changes to add duration into history database. This completes Issue 9605037 which can compute suggestion sites based on time slicing as well as visit duration. A new database table was added for those new fields we may need to experiment on. Original cl: https://chromiumcodereview.appspot.com/9789001/ comment: HistoryProfileTest.TypicalProfileVersion fails because of the trybots inability to patch the History file - it runs fine locally. Created by Wei Li weili@chromium.org", "position": "database" },
{ "text": "Revert 130005 - Committing: Changes to add duration into history database. This completes Issue 9605037 which can compute suggestion sites based on time slicing as well as visit duration. A new database table was added for those new fields we may need to experiment on. Original cl: https://chromiumcodereview.appspot.com/9789001/ comment: HistoryProfileTest.TypicalProfileVersion fails because of the trybots inability to patch the History file - it runs fine locally. Created by Wei Li weili@chromium.org BUG=none TEST=unit-tests TBR=brettw", "position": "database" },
{ "text": "Committing: Changes to add duration into history database. This completes Issue 9605037 which can compute suggestion sites based on time slicing as well as visit duration. A new database table was added for those new fields we may need to experiment on. Original cl: https://chromiumcodereview.appspot.com/9789001/ comment: HistoryProfileTest.TypicalProfileVersion fails because of the trybots inability to patch the History file - it runs fine locally. Created by Wei Li weili@chromium.org BUG=none TEST=unit-tests TBR=brettw", "position": "database" },
{ "text": "Add database recovery for FileSystemOriginDatabase", "position": "database" },
{ "text": "Reland - Create a database for NaCl validation caching that is shared between processes.", "position": "database" },
{ "text": "Revert 129061 - Create a database for NaCl validation caching that is shared between processes.", "position": "database" },
{ "text": "Create a database for NaCl validation caching that is shared between processes.", "position": "database" },
{ "text": "Relax strict quota limit checks when reading pre-existing DomStorage database files. The other checks will disallow increases that exceed the limit, but when it comes to existing files its not clear that the checks on open will pass. So we'll grandfather in the existing files. Review URL: https://chromiumcodereview.appspot.com/9594038", "position": "database" },
{ "text": "Reinitialize the cookie database if the meta table gets corrupted.", "position": "database" },
{ "text": "Dump cookie database schema on load failure.", "position": "database" },
{ "text": "Add tracking of database actions to NetworkActionPredictor.", "position": "database" },
{ "text": "IndexedDB: Ensure database connections are closed on tab close.", "position": "database" },
{ "text": "AppCache INTERCEPT namespace. - Add support for a custom CHROMIUM CACHE MANIFEST signature. Other browsers should ignore files with this signature. - Parse intercept namespace entries out of the new CHROMIUM-INTERCEPT manifest section. Other browsers should ignore this entire section. - Store and retrieve the new kind of namespace records in the database layer. - Upgrade existing databases to the new schema. - Look for matches in the new namespaces when handling main and sub resource requests. - Add unit tests.", "position": "database" },
{ "text": "Revert 110384 - Revert 110356 - Sync: Improve handling of database load failures", "position": "database" },
{ "text": "Revert 110356 - Sync: Improve handling of database load failures", "position": "database" },
{ "text": "Sync: Improve handling of database load failures", "position": "database" },
{ "text": "Revert 110177 - Sync: Improve handling of database load failures", "position": "database" },
{ "text": "Add database to use as the source of an alternative algorithm for Network Action Prediction", "position": "database" },
{ "text": "always read and write link url and link text independently without enforcing any semantics on them. If we load link url only if link text is not empty (and vice versa) when writing notifications JSON file then we get out of sync with sync database for a given notification. This can fail the model association when browser starts up next time and halt syncing of notifications in retail builds and crash in debug builds. Review URL: http://codereview.chromium.org/8474008", "position": "database" },
{ "text": "Setup the error delegate for the quota database so we get error histograms. Review URL: http://codereview.chromium.org/8341123", "position": "database" },
{ "text": "Update thumbnail database to carry sizes field - prep for NTP4 large icon support", "position": "database" },
{ "text": "Make AppNotificationStorage create the database on disk lazily", "position": "database" },
{ "text": "Enhance error reporting for leveldb errors in origin/directory database code", "position": "database" },
{ "text": "Ensure that TemplateURLs created from old database entries without sync_guids generate their own GUIDs.", "position": "database" },
{ "text": "Some DatabaseTracker cleanup. * Remove a DCHECK about an empty database name that should not be there. * Properly update the cached copy of the database_description. * unit tests for the above", "position": "database" },
{ "text": "Adding a sync_guid field to TemplateURL. Adding appropriate database migration changes and tests.", "position": "database" },
{ "text": "Delete filesystem origin info in the origin database if it is empty", "position": "database" },
{ "text": "Do not create a new directory database for read operations.", "position": "database" },
{ "text": "Include the actual NSS database directory pathname in the error message to help track down bug 75197.", "position": "database" },
{ "text": "[Mac] Exclude safe-browsing database files from timemachine.", "position": "database" },
{ "text": "Revert 84301 - A database to hold filesystem directory information, to replace real paths.", "position": "database" },
{ "text": "A database to hold filesystem directory information, to replace real paths.", "position": "database" },
{ "text": "A database to hold mappings from origin identifiers to unique directory names.", "position": "database" },
{ "text": "Enable some pyauto database tests. Two problems have been addressed. The flakiness with opening incognito windows was fixed in r81620, and this CL waits for the database transaction to be committed. BUG=64664, 66714, 71158 TEST=none", "position": "database" },
{ "text": "Update quota database schema to store quota per-host instead of per-origin.", "position": "database" },
{ "text": "Autofill database migration to clean up bogus profiles.", "position": "database" },
{ "text": "Lookup hash prefix in safebrowsing service. To achieve that, added an interface in safe browsing database and safe browsing service.", "position": "database" },
{ "text": "Histogram size of safe-browsing database updates.", "position": "database" },
{ "text": "Don't update safe-browsing database if no updates come down.", "position": "database" },
{ "text": "Mark indexeddb and database cyclers as flaky.", "position": "database" },
{ "text": "Update database head.js to use sessionStorage.", "position": "database" },
{ "text": "Move database handling code to the Backend class to clean up the interface.", "position": "database" },
{ "text": "default plugin: Remove dcheck when unable to open the database file.", "position": "database" },
{ "text": "Adding a test that makes sure the same database can be simultaneously accessed from workers and the page.", "position": "database" },
{ "text": "Add plumbing for passing the indexed database quota via IDBFactory::open", "position": "database" },
{ "text": "Add database_update_in_progress_ in SafeBrowsingService to indicate if the database is still changing. This could be used in the end to end safebrowsing test so we only verify database after this flag is set to false.", "position": "database" },
{ "text": "Re-land r56742 now with correct database files", "position": "database" },
{ "text": "NSS cert database cleanups", "position": "database" },
{ "text": "Grant ChromeApplications unlimited appcache and database storage if requested.", "position": "database" },
{ "text": "Rename the Thumbnails database file to Favicons. The database will no longer store the thumbnails - TopSites is storing it's own thumbnails.", "position": "database" },
{ "text": "UI test for removal of empty DOM Storage database files.", "position": "database" },
{ "text": "Move all database accesses to the DB thread. The database now returns all urls and thumbnails in a single request.", "position": "database" },
{ "text": "1. Create and use the TopSites database file. 2. Timed updates of the database based on the number of sites changed.", "position": "database" },
{ "text": "1. Write thumbnail to the database on SetPageThumbnail. 2. Store the thumbnail score in the database.", "position": "database" },
{ "text": "Adding an SQLite database for TopSites.", "position": "database" },
{ "text": "Adding a mock database layer. Testing support of storage in TopSites.", "position": "database" },
{ "text": "Revert 48061 - Adding a mock database layer. Testing support of storage in TopSites.", "position": "database" },
{ "text": "Delete and recreate the sync database if it is corrupt.", "position": "database" },
{ "text": "Revert 45257 - Delete and recreate the sync database if it is corrupt.", "position": "database" },
{ "text": "Remove extra notification from BookmarkModel::Copy. This was causing duplicate bookmarks to be created in the sync database when a mac user uses option drag to duplicate a bookmark.", "position": "database" },
{ "text": "Include the appcache and database tracker databases into the sql diagnostics fold.", "position": "database" },
{ "text": "Revert 43183 - Block database access on allowDatabase instead of databaseOpenFile.", "position": "database" },
{ "text": "Block database access on allowDatabase instead of databaseOpenFile.", "position": "database" },
{ "text": "Re-enabling two database tests, which should be stable now.", "position": "database" },
{ "text": "Add database model worker to worker registry and remove deprecated thread check.", "position": "database" },
{ "text": "Notify when database access is blocked due to content settings.", "position": "database" },
{ "text": "Ask renderers to immediately close all DB handles to a database file when the file needs to be deleted.", "position": "database" },
{ "text": "Strings for HTML5 database support in the cookies tree view.", "position": "database" },
{ "text": "Delete HTML5 database in BrowsingDataRemover, part 1.", "position": "database" },
{ "text": "Making sure that all in-progress transactions are rolled back on the database thread before they're destroyed. Otherwise, SQLiteTransaction's destructor will try to do a rollback and that would cause an assertion failure, if the object is not destroyed on the DB thread.", "position": "database" },
{ "text": "Don't acquire a database lock in syncable::DirectoryBackingStore::SaveChanges if there is nothing to save.", "position": "database" },
{ "text": "Revert 37367 - Implementation of the database safe worker model.", "position": "database" },
{ "text": "Implementation of the database safe worker model.", "position": "database" },
{ "text": "Fix for a big appcache storage bug. Now stores a record of the new master entry in the database even when there is no manifest update.", "position": "database" },
{ "text": "Adds support for SetDatabaseQuota(). Also, should remove a lot of flakiness from the database layout tests: when a DB test calls ClearAllDatabases(), we force test_shell to wait for all DBs opened in previous tests to close before running the test.", "position": "database" },
{ "text": "Add a DeletableResponseIds table to the appcache database schema, groundwork for purging unused responses from the disk cache.", "position": "database" },
{ "text": "1. Changes the order in which some functions are called to match the pre-r52536 order. Namely, when a new Database object is created, DatabaseTracker::addOpenDatabase() is called in the constructor, before doing anything else related to that database (like trying to get a file handle to the database file). Chromium's implementation depends on this ordering. 2. Changes Database::performOpenAndVerify() to close the open handle to the database file immediately if the database version does not match the expected one. The current behavior is to add the Database object to a DatabaseThread collection and let the database thread close the handle when it's destroyed.", "position": "database" },
{ "text": "A new database should be registered with the Document, DatabaseTracker and DatabaseThread only after it was successfully opened and its version was successfully verified.", "position": "database" },
{ "text": "Remove pointers to a database that failed to open from the DatabaseTracker and Document.", "position": "database" },
{ "text": "Make DatabaseTrackerChromium::removeOpenDatabase() send and IPC on the main thread when a database is being closed.", "position": "database" },
{ "text": "Move some code related to database closing from the destructor to the close() method. This would allow us to do things such as post tasks to other threads when a database closes, which cannot be done now, because we cannot increment the ref count to a database object when we're in its destructor.", "position": "database" },
{ "text": "Add another database flaky crash.", "position": "database" },
{ "text": "Add one more suppression for SafeBrowsing database for ThreadSanitizer BUG=28559 TBR=dank Review URL: http://codereview.chromium.org/434007", "position": "database" },
{ "text": "Fix a problem where queued checks' clients would never be called back if when the check finally ran it passed the prefix check (the common case). This was made more noticeable by r31950 since before that things wouldn't be queued unless we were resetting the database (rare) or caught a narrow timing window where |database_| was true but |database_loaded_| was false; after that, we could get this on startup, and with r32136, after closing the database as well.", "position": "database" },
{ "text": "Fix DatabaseTracker::LazyInit() to open the tracker database only once.", "position": "database" },
{ "text": "Add ability to close the Safe Browsing Service database and recreate it on the fly.", "position": "database" },
{ "text": "More safe browsing cleanup work: * Remove |resetting_| from the safe browsing service, it doesn't do anything useful. * Add appropriate locks in a few places in the database that were missing them. * Prevent potential infinite recursion in the database at one spot.", "position": "database" },
{ "text": "Deleting the 'databases' directory if the tracker database exists but is corrupt or doesn't have a meta table.", "position": "database" },
{ "text": "Add a stub implementation of PersonalDataManager, the connection between the database and the autofill manager.", "position": "database" },
{ "text": "Adding Chromium's database tracker.", "position": "database" },
{ "text": "Random style fixes in the database backend.", "position": "database" },
{ "text": "Clean up database files. Some changes are due to Google style guide violations, some to be consistent with prevailing team style, some merely in hopes of increasing readability.", "position": "database" },
{ "text": "Adding a class that allows us to enable/disable features at runtime. Adding a flag to enable database support.", "position": "database" },
{ "text": "Start the database query for the new tab page results as soon as we create the MostVisitedHandler.", "position": "database" },
{ "text": "JavaScriptCore: Fixed <rdar://problem/5751979> Database code takes JSLock on secondary thread, permanently slowing down JavaScript", "position": "database" },
{ "text": "Fix numerous bugs in fts2 where a corrupt fts2 database could cause out-of-bounds reads and writes.", "position": "database" },
{ "text": "Some history backend fixes for database corruption.", "position": "database" },
{ "text": "Enable database logging on history thread.", "position": "database" },
{ "text": "Copy upgraded typical_history database to the other theme profiles.", "position": "database" },
{ "text": "DRT improvements for Database stuff.", "position": "database" },
{ "text": "posix: remove unused ie7_logins database table", "position": "database" },
{ "text": "Fix: Spurious SQL error message is logged in priming SQLite database cache.", "position": "database" },
{ "text": "Refactor MetaTableHelper to remove redundant table name prefixing with database name. Also, PrimeCache logic duplicated in HistoryBackend and SQLitePersistentCookieStore is moved to this class.", "position": "database" },
{ "text": "Add merging algorithm for keychain and metadata db PasswordForms, and unit tests for it. Not used quite yet, since the metadata database still needs to be integrated into PasswordStoreMac.", "position": "database" },
{ "text": "Fix code generator to enable Database support.", "position": "database" },
{ "text": "Remove unused database code.", "position": "database" },
{ "text": "Hook up V8 Database Bindings.", "position": "database" },
{ "text": "Flush the visited link database after a write. If we crash, we're not guaranteed that the write will make it to the kernel.", "position": "database" },
{ "text": "Bring many of the template_url classes into the fold for the Mac. Note that template_url_model_unittest isn't there; it requires a working database first.", "position": "database" },
{ "text": "Fixing crash in SafeBrowsingDatabaseBloom: When SafeBrowsingDatabaseBloom is going out of scope (see stack trace below) Close() is called. When insert_transaction_ is non NULL, it holds a pointer to the database, |db_|, which is owned by SafeBrowsingDatabaseBloom. Close() closes the database but did not free |insert_transaction_| which causes |insert_transaction_| to attempt to rollback the transaction with an invalid database pointer.", "position": "database" },
{ "text": "Make sure we end the update process if we get an errorfrom the servers. Previously, if we got a 400 (or other)error response, we'd leave the database and transactionopen.BUG=5060 (http://crbug.com/5060) Review URL: http://codereview.chromium.org/12918", "position": "database" },
{ "text": "Reduce memory consumption by keeping the SafeBrowsing database closed when not processing updates.", "position": "database" },
{ "text": "Reordered some logic to fix a bug which caused the clearing of the database to malfunction.", "position": "database" },
{ "text": "Entries in a form get recorded when the user submits the form. Database and pop-up menu talk to each other. Pop-up menu appears containing suggestions. Review URL: http://codereview.chromium.org/9462", "position": "database" },
{ "text": "Updating the Chrome plugin installer database files with the updated java plugin installer from Sun.", "position": "database" },
{ "text": "enable database in scons build", "position": "database" },
{ "text": "Add compatible version support since it was only halfway in place, and try and make our database versioning code and logging more similar across various consumers.", "position": "database" },
{ "text": "Add fieldnames to SQL statements for better forward-compatibility. Had we had this code in place already, I wouldn't have needed to rev the compatible version number in my upcoming database change >:(", "position": "database" },
{ "text": "Give the new implementation a unique name for the database and filter storage so that it can run side by side with the old implementation without data loss. Review URL: http://codereview.chromium.org/8844", "position": "database" },
{ "text": "Don't run a SQLite query on every iteration of the sync thread when the query will touch a large portion of the icon database while performing no useful work.", "position": "database" },
{ "text": "skip a test which times out due to lack of database support.", "position": "database" },
{ "text": "Drop V8DOMWindow dependency on database Review URL: http://codereview.chromium.org/6205", "position": "database" },
{ "text": "Make jsbindings build almost all of the way on the Mac. The remaining errors are StaticConstructors.h (fixed in another change), some stuff about database support in V8DOMWindow.cpp (looks like the #ifdefs aren't quite right), and something else about the frame loader client being pure virtual. The fixes here are just the fixes doable in the project file, and mostly involve changes to FEATURE_DEFINES and HEADER_SEARCH_PATHS. Review URL: http://codereview.chromium.org/6202", "position": "database" },
{ "text": "Create a SafeBrowsing database interface to more easily facilitate alternate implementations.", "position": "database" },
{ "text": "Fix problem of safebrowsing database removing an add for a hostname when it got a sub for some prefixes.", "position": "database" },
{ "text": "Updating the SafeBrowsing database version to 3, to reset everyone's database after we had database corruption last week from bad data being served", "position": "database" },
{ "text": "Fix Bug 18837: Database panel fails to display tables if any value is NULL", "position": "database" },
{ "text": "Fix Bug 19438: Transaction errors are never displayed in database query view", "position": "database" },
{ "text": "Adds a DataGrid object that is used for multi-column data and can contain hierarchical content with disclosure arrows. A lot of DataGrid was copied from treeoutline.js. This change makes the database views use the DataGrid. It will later be used by the ProfileView.", "position": "database" },
{ "text": "Fixes the issue were a Database view could still be visible after navigating to a new page.", "position": "database" },
{ "text": "Fixes the bug where the Database table names do not update when running the CREATE TABLE or DROP TABLE queries. Also makes the table names update every time the database is collapsed and expanded.", "position": "database" },
{ "text": "Fix the build without Database support (fixes the Qt/win build).", "position": "database" },
{ "text": "Don't trim whitespace when looking for the current match, this prevents tabbing through matches in the up-coming Database Query view.", "position": "database" },
{ "text": "<rdar://problem/5556378> Implemented database related UI delegate methods (prompts for new/enlarged databases)", "position": "database" },
{ "text": "Fix compilation from a clean build with the database feature disabled. JSCustomVersionChangeCallback.cpp doesn't actually need the SQL header file, just ScriptInterpreter.", "position": "database" },
{ "text": "Disable the database feature in the qmake build for now.", "position": "database" },
{ "text": "Make disabling the database feature (ENABLE_DATABASE=0) work by placing various #ifdefs into the code and making the compilation of some files optional.", "position": "database" },
{ "text": "Updating window properties to include new features from HTML5 database support", "position": "database" },
{ "text": "<rdar://problem/5436617> Favicons sometimes don't show up even when they are in the database - A client can try to retain an icon for a page before the database is actually opened. Since isOpened() is not a requirement to retain an icon, remove the check for that. Instead, we'll check to make sure whether this database is enabled before proceeding.", "position": "database" },
{ "text": "Disable the favicon database on Windows for now, to eliminate the sqlite dependency.", "position": "database" },
{ "text": "Missed checking in this file when checking in icon database patch from Adam Treat. Unused on all platforms presently.", "position": "database" },
{ "text": "Patch from Adam Treat to make the SQLite icon database optional.", "position": "database" },
{ "text": "Fixed: <rdar://problem/3890944> disable icon database for Dashboard", "position": "database" },
{ "text": "Fix issue where restart source database sentinel file is being written during session suspend.", "position": "database" },
{ "text": "ignore temporary tag database files", "position": "database" },
{ "text": "rebuild compilation database when compiler changes (#8591)", "position": "database" },
{ "text": "Fix issue where lastKnownFileTime would be dropped if the file was successfully saved by the source database file properties were not. This would cause annoying prompts asking the user to reload the file as it hasd changed on disk, even though it really had not.", "position": "database" },
{ "text": "Retry open file operations when attempting to save source files / source database files.", "position": "database" },
{ "text": "Made RStudio database name configurable in /etc/rstudio/database.conf", "position": "database" },
{ "text": "Do not log file permissions error for sqlite database provider", "position": "database" },
{ "text": "Change default sqlite database path from /var/run to /var/lib to ensure it is not deleted on reboot. Fixes #6706", "position": "database" },
{ "text": "add INFO level logs for database connectivity", "position": "database" },
{ "text": "Make database startup work properly with rserver-dev script.", "position": "database" },
{ "text": "Export server tmp dir env var in open source to ensure that the database configuration code initializes the database at the correct path", "position": "database" },
{ "text": "Lay down first version of ServerDatabase for initializing database connection in server processes, and performing schema updates", "position": "database" },
{ "text": "First working implementation of database schema updater and associated tests", "position": "database" },
{ "text": "WIP - Database schema updater", "position": "database" },
{ "text": "Add basic database code - connection and statement execution", "position": "database" },
{ "text": "Add packaging of database libraries for OSX", "position": "database" },
{ "text": "rebuild compilation database when library mutated", "position": "database" },
{ "text": "Made some permission fixes for server mode crash handling where the crashed database could not be written to by unprivileged users (such as rsession processes). Also made the revocation list path calculation based on a setting instead of relying on the shared storage path (as shared storage does not exist in open source).", "position": "database" },
{ "text": "Make the default server crash handler database path read/writeable by all users", "position": "database" },
{ "text": "use fontconfig database to list monospace fonts", "position": "database" },
{ "text": "build font database in separate thread", "position": "database" },
{ "text": "only construct font database once (on init)", "position": "database" },
{ "text": "failure to lock source database should not be fatal", "position": "database" },
{ "text": "standardize casing on database driver images", "position": "database" },
{ "text": "install database connection icons", "position": "database" },
{ "text": "store hierarchy inside database object (WIP)", "position": "database" },
{ "text": "factor to support multiple database object types", "position": "database" },
{ "text": "push editor state into local source database before completing drag out", "position": "database" },
{ "text": "ignore compilation database file", "position": "database" },
{ "text": "change name of connection history database (invalidate old databases)", "position": "database" },
{ "text": "consolidate source database file id to path mapping tables", "position": "database" },
{ "text": "rewind source database content update to file write time on read", "position": "database" },
{ "text": "persist source database dirty flag", "position": "database" },
{ "text": "infer document type from source database rather than file extension", "position": "database" },
{ "text": "ensure documents are synchronized with the source database on popout/in", "position": "database" },
{ "text": "make use of source database instead of re-reading from disk", "position": "database" },
{ "text": "migrate source database during transition to multi-session", "position": "database" },
{ "text": "update source database when source satellite window closes", "position": "database" },
{ "text": "synchronize tab order with source database and emit on init", "position": "database" },
{ "text": "more robust compilation database semantics", "position": "database" },
{ "text": "move r compilation database into it's own source file", "position": "database" },
{ "text": "make compilation database a struct", "position": "database" },
{ "text": "refactor access to compilation database from source index", "position": "database" },
{ "text": "move compilation database out of core", "position": "database" },
{ "text": "work towards compilation database for packages", "position": "database" },
{ "text": "only update compilation database when we need to for standalone cpp", "position": "database" },
{ "text": "trigger update of compilation database when a package source file is added", "position": "database" },
{ "text": "factor source database update/remove monitoring out into generic events", "position": "database" },
{ "text": "only set dirty bit in document database when the document contents change", "position": "database" },
{ "text": "don't detach from source database at shutdown if we never successfully attached", "position": "database" },
{ "text": "catch exceptions which occur while reading source database json", "position": "database" },
{ "text": "use crc32 hashes for source document database files", "position": "database" },
{ "text": "initial implementation of source database supervisor", "position": "database" },
{ "text": "rebuild source database index when resuming from suspended session", "position": "database" },
{ "text": "only keep special source database indexes for documents which are dirty", "position": "database" },
{ "text": "more efficient searching of src database contexts (use set not vector)", "position": "database" },
{ "text": "search source database prior to searching project index", "position": "database" },
{ "text": "update mime database during install", "position": "database" },
{ "text": "add hack to disable optimization of linear svms; improved precision of optimize_linear_svm; add the relevant test, which however requires some big database (so it's disabled by default)", "position": "database" }
]