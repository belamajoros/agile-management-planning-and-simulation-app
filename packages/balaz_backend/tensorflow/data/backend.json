[
{ "text": "[MRG] Fix LinearModelsCV for loky backend. (#14264)", "position": "back-end" },
{ "text": "Fix parallel backend neighbors (#12172)", "position": "back-end" },
{ "text": "ENH use threading backend for features importance parallelisation", "position": "back-end" },
{ "text": "ENH: parallize the BaseForest.apply method with the threading backend", "position": "back-end" },
{ "text": "Allow only superuser to do backend copy.", "position": "back-end" },
{ "text": "Fixes: Growing backend when using nested function calls", "position": "back-end" },
{ "text": "Fixes: Errors when PQexec() in backend creates temp relations and transaction is aborted", "position": "back-end" },
{ "text": "Centralize more of the defines from backend/port under config.h", "position": "back-end" },
{ "text": "Enabled download home v1 to work with the new backend", "position": "back-end" },
{ "text": "Add PIN printing support check for CUPS IPP backend.", "position": "back-end" },
{ "text": "Mark VAO tests as failing with ANGLE's OpenGL backend.", "position": "back-end" },
{ "text": "Cleanup BackendDelegate and Backend ownership in HistoryService.", "position": "back-end" },
{ "text": "AppCache: Extract host methods from mojom::AppCacheBackend.", "position": "back-end" },
{ "text": "Integrates PluginVmLauncherView with backend", "position": "back-end" },
{ "text": "[Password Manager] Skip illegal entries when migrating away from native backends", "position": "back-end" },
{ "text": "Always call into in-product help backend upon new tab opening", "position": "back-end" },
{ "text": "[Chromecast] Wait until the real backend is initialized to call SetVolume", "position": "back-end" },
{ "text": "Implementation of USS sync backend for Send Tab to Device feature", "position": "back-end" },
{ "text": "[Explore sites]: Modify backend tasks to read from new activity table", "position": "back-end" },
{ "text": "[App Management] Add permissions to fake backend.", "position": "back-end" },
{ "text": "Add field trial for SequenceManager as a backend to MessageLoop.", "position": "back-end" },
{ "text": "Add quota usage details tests for all other storage backends.", "position": "back-end" },
{ "text": "[Autofill Assistant] Default backend url.", "position": "back-end" },
{ "text": "[scheduler] Making MessageLoop backend variant dependent on Finch config.", "position": "back-end" },
{ "text": "[Autofill Assistant] Backend changes to prepare for handling key-press events.", "position": "back-end" },
{ "text": "Workaround apparent data corruption in blockfile on OS X 10.14 by switching backends.", "position": "back-end" },
{ "text": "Settings WebUI: Log error in C++ backend when crostini unshare path fails.", "position": "back-end" },
{ "text": "[Autofill Assistant] Backend changes to the autofill assistant payment request in order to support collapsing PR sections.", "position": "back-end" },
{ "text": "[message_loop] Use SequenceManager as a backend for MessageLoop.", "position": "back-end" },
{ "text": "[Chromecast] Disable CMA backend on M and below.", "position": "back-end" },
{ "text": "Migrate the SyncEngine drive backend to the IdentityManager", "position": "back-end" },
{ "text": "Fix cast_audio_backend unittest crashing on biggie", "position": "back-end" },
{ "text": "[Chromecast] Fix media backend PTS reporting.", "position": "back-end" },
{ "text": "Add feature engagement backend event for user reopening a tab", "position": "back-end" },
{ "text": "Remove SyncPrefs::GetLocalSyncBackendDir", "position": "back-end" },
{ "text": "[Chromecast] Avoid backend decryptor for clear key", "position": "back-end" },
{ "text": "Stop CMA backend when pause/seek/skipping", "position": "back-end" },
{ "text": "net: Use net::Error for disk_cache::Backend return where applicable.", "position": "back-end" },
{ "text": "Android Video Thumbnail: Hook video thumbnail backend to UI.", "position": "back-end" },
{ "text": "NUX: Move NUX backend code to chrome/browser/ui/webui/welcome", "position": "back-end" },
{ "text": "add getActiveProject api function", "position": "back-end" },
{ "text": "remove undocumented registerCommand api function", "position": "back-end" },
{ "text": "tweak API a bit", "position": "back-end" },
{ "text": "allow target ID in API methods", "position": "back-end" },
{ "text": "return data in API methods", "position": "back-end" },
{ "text": "add 'replace_selection' API function", "position": "back-end" },
{ "text": "change tutorial api session info members", "position": "back-end" },
{ "text": "show error dialog when HTTP API failures encountered during publish", "position": "back-end" },
{ "text": "provide more API for setting editor screen position", "position": "back-end" },
{ "text": "add API for setting worker timeouts", "position": "back-end" },
{ "text": "simplify API for DocDisplay level", "position": "back-end" },
{ "text": "simple API for adding custom Vim commands", "position": "back-end" },
{ "text": "add api level support for brief comments with completions", "position": "back-end" },
{ "text": "libclang api for diagnostics", "position": "back-end" },
{ "text": "don't resolve aliased paths in source marker api (as the R layer ensures they always come in as full paths)", "position": "back-end" },
{ "text": "normalize all inbound marker api paths", "position": "back-end" },
{ "text": "R api for sourceMarkers", "position": "back-end" },
{ "text": "various changes to resolve API changes", "position": "back-end" },
{ "text": "add api to maximize viewer", "position": "back-end" },
{ "text": "use htmltools API for html dependencies", "position": "back-end" },
{ "text": "Use new htmltools API for dependencies", "position": "back-end" },
{ "text": "set slide index directly with ioslides api (avoid re-render on slide change)", "position": "back-end" },
{ "text": "move presentation back-end into it's own source file", "position": "back-end" },
{ "text": "move rmarkdown back-end into it's own directory", "position": "back-end" },
{ "text": "move desktop synctex back-end detection to client and capture version info for evince", "position": "back-end" },
{ "text": "change spelling api to take multiple words at once", "position": "back-end" },
{ "text": "add api for terminating running compilePdf operations", "position": "back-end" },
{ "text": "put in (as yet unimplemented) api for suppressing input display in shell", "position": "back-end" },
{ "text": "Hook up backend for creating projects from git repo URL", "position": "back-end" },
{ "text": "Create portable API for composing and escaping shell commands", "position": "back-end" },
{ "text": "add incremental work api to module_context", "position": "back-end" },
{ "text": "Rationalize Boost filesystem API versions", "position": "back-end" },
{ "text": "implment back-end of workspace and working directory preferences", "position": "back-end" },
{ "text": "videoio: plugins API versioning", "position": "back-end" },
{ "text": "Added RISC-V backend of universal intrinsics", "position": "back-end" },
{ "text": "dnn: fix High-Level public API (cv::dnn::Model class)", "position": "back-end" },
{ "text": "python: fixed limited API build", "position": "back-end" },
{ "text": "Add support for using new ffmpeg encoding API when writing a video.", "position": "back-end" },
{ "text": "dnn(ie): switch to nGraph backend by default", "position": "back-end" },
{ "text": "dnn(IE): use HAVE_DNN_IE_NN_BUILDER_2019 for NN Builder API code", "position": "back-end" },
{ "text": "Fix render opencv backend text slowdown", "position": "back-end" },
{ "text": "Enable ENet with Inference Engine backend on CPU", "position": "back-end" },
{ "text": "dnn: bump API version", "position": "back-end" },
{ "text": "allow forcing the input format for ffmpeg backend with env var", "position": "back-end" },
{ "text": "Async API for GAPI", "position": "back-end" },
{ "text": "Limited API support for Python3", "position": "back-end" },
{ "text": "Removed LUT3D API entry", "position": "back-end" },
{ "text": "core: Async API / AsyncArray", "position": "back-end" },
{ "text": "android: build package with API 21", "position": "back-end" },
{ "text": "Fix IE backend considering future changes.", "position": "back-end" },
{ "text": "Fix Intel's Inference Engine backend from future. Second try.", "position": "back-end" },
{ "text": "dnn: fix vulkan backend builds with Clang", "position": "back-end" },
{ "text": "add missing API cvGetPropVisible_W32", "position": "back-end" },
{ "text": "backport: refined QRCodeDetector API for OpenCV 4.0", "position": "back-end" },
{ "text": "mostly removed obsolete C API from calib3d (at least at the interface level) (#13081)", "position": "back-end" },
{ "text": "refined QRCodeDetector API for OpenCV 4.0 (#13086)", "position": "back-end" },
{ "text": "removed C API in the following modules: photo, video, imgcodecs, videoio (#13060)", "position": "back-end" },
{ "text": "removed the old C API for Haar-based object detection; use CascadeClassifier from now on", "position": "back-end" },
{ "text": "don't use constructors for C API structures", "position": "back-end" },
{ "text": "core: remove constructors from C API structures", "position": "back-end" },
{ "text": "core: align cv::AutoBuffer API with std::vector/std::array", "position": "back-end" },
{ "text": "Kinect2 support added to OpenNI2 backend (#11794)", "position": "back-end" },
{ "text": "videoio: update librealsense to API 2.0", "position": "back-end" },
{ "text": "Make Intel's Inference Engine backend is default if no preferable backend is specified.", "position": "back-end" },
{ "text": "Update Intel's Inference Engine deep learning backend (#11587)", "position": "back-end" },
{ "text": "MSMF-based VideoCapture and VideoWriter backend changed to C++ interface", "position": "back-end" },
{ "text": "FFMPEG-based VideoCapture and VideoWriter backend changed to C++ interface", "position": "back-end" },
{ "text": "Add CPU default extensions loading in IE dnn backend (#11252)", "position": "back-end" },
{ "text": "samples: avoid using of legacy C-like API (part 2)", "position": "back-end" },
{ "text": "Intel Inference Engine deep learning backend (#10608)", "position": "back-end" },
{ "text": "updated createsamples app utility functions to new c++ API from old c", "position": "back-end" },
{ "text": "ocl: low-level API to support OpenCL binary programs", "position": "back-end" },
{ "text": "Added color conversion HAL API functions implemented as immediate mode OpenVX calls.", "position": "back-end" },
{ "text": "Fixed warpings, added border mode support to warps and filter. Added morphology HAL API functions implemented as immediate mode OpenVX calls.", "position": "back-end" },
{ "text": "Resize, Warp and Filter HAL API functions are implemented as immediate mode OpenVX calls", "position": "back-end" },
{ "text": "Several HAL API functions are implemented as immediate mode OpenVX calls", "position": "back-end" },
{ "text": "Instrumentation for OpenCV API regions and IPP functions;", "position": "back-end" },
{ "text": "follow the naming rule as other API * stop using 'CUDA' prefix * add explanation", "position": "back-end" },
{ "text": "Removed unnecessary check for Android API level and unused flags.", "position": "back-end" },
{ "text": "android: increase default native API level 8=>9", "position": "back-end" },
{ "text": "FileStorage: add simplified API for bindings", "position": "back-end" },
{ "text": "refactored; added Camera2, notify callbacks, front/back maxCamera sizes; disable new stuff if target API < 21", "position": "back-end" },
{ "text": "Enabled pthreads backend for mingw", "position": "back-end" },
{ "text": "use simplified API selection logic in cvCreateCameraCapture as well", "position": "back-end" },
{ "text": "GPU samples with NVIDIA specific API excluded from build if CUDA disabled.", "position": "back-end" },
{ "text": "Added imreadmulti API to read multi-paged images into a vector of Mat.", "position": "back-end" },
{ "text": "updated logistic regression program with new api example", "position": "back-end" },
{ "text": "Added IPP Pyramid API functions to cv::buildPyramid", "position": "back-end" },
{ "text": "Overload detectMultiScale API for ocl::haar.", "position": "back-end" },
{ "text": "changed InputArray's enumeration constant for UMat, since it may potentially conflict with existing OpenCL module. refactored Kernel's setArg API (now UMat is passed to a kernel as a structure, as Alexander A suggested). removed Kernel's cleanup callback from the external API; now each kernel keeps track of used matrices and they are dereferenced after it's complete.", "position": "back-end" },
{ "text": "the first draft of transparent API and new UMat class.", "position": "back-end" },
{ "text": "Removed the cvMinEnclosingTriangle function since the C API will be deprecated starting with OpenCV 3.0", "position": "back-end" },
{ "text": "MediaRecorder hint enabled for all Android devices with API level 14 and above.", "position": "back-end" },
{ "text": "LibTIFF Win32 API back-end disabled for Windows RT.", "position": "back-end" },
{ "text": "Restricted Win32 API was fixed in Highgui and some 3rd party libs. Patch for libpng added.", "position": "back-end" },
{ "text": "WinRT API Certification fixes for core and contrib.", "position": "back-end" },
{ "text": "removed obsolete API from gpuarithm module", "position": "back-end" },
{ "text": "Split MxArray out of bridge into standalone file. Does not depend on bridge. Working to make it API complete with respect to mxArray, but with better calling syntax", "position": "back-end" },
{ "text": "Minimize usages of legacy C API inside the library", "position": "back-end" },
{ "text": "Remove C API from OpenCL module", "position": "back-end" },
{ "text": "Move C API of opencv_objdetect to separate file", "position": "back-end" },
{ "text": "Workaround hanging of ocl module when ocl API in not really used", "position": "back-end" },
{ "text": "Experimental MS Media Foundation API support added", "position": "back-end" },
{ "text": "Completely separate C and C++ API of OpenCV core", "position": "back-end" },
{ "text": "new API for StereoMatchers", "position": "back-end" },
{ "text": "Fix Java API generation after normalization", "position": "back-end" },
{ "text": "added Asus Xtion QVGA modes to the OpenNI backend (patch #1753)", "position": "back-end" },
{ "text": "RESTART_REQUIRED status removed from OpenCV Manager API; OpenCV info library name fixed; Minimum API level for OpenCV library project increased up to 3 for using message dialogs.", "position": "back-end" },
{ "text": "improved image rendering performance in Qt backend for highgui UI (bug #2356)", "position": "back-end" },
{ "text": "Fix build of Java API for Windows", "position": "back-end" },
{ "text": "Reduce verbosity of Java API generators", "position": "back-end" },
{ "text": "Fix Java API build", "position": "back-end" },
{ "text": "enabled SSE3 by default; integrated SSE3-optimized bilateral filter (by Grigoriy Frolov); modified API of non-local means (use Input/OutputArrays)", "position": "back-end" },
{ "text": "removing warnings on deprecated api when targeting to android-15+", "position": "back-end" },
{ "text": "adding java api ref. to top-level index", "position": "back-end" },
{ "text": "Megred fix for pyrhon API generator regression r8528", "position": "back-end" },
{ "text": "backported API for storing OpenCV data structures to text string and reading them back (r8481, r8516, r8518, r8522)", "position": "back-end" },
{ "text": "Fixed Java API build", "position": "back-end" },
{ "text": "added API for storing OpenCV data structures to text string and reading them back", "position": "back-end" },
{ "text": "Java API: updating OpenCV version, minor Core API improvements, enabling EM.", "position": "back-end" },
{ "text": "Loader classes for OpenCV with Android service added. Library loading in OpenCV API removed.", "position": "back-end" },
{ "text": "fixing #1808, Java API improvements", "position": "back-end" },
{ "text": "added video stream positioning in QTKit-based VideoCapture backend (patch #1420)", "position": "back-end" },
{ "text": "Java API minor fixes", "position": "back-end" },
{ "text": "updating Java samples to meet Java API changes", "position": "back-end" },
{ "text": "fixed ffmpeg backend build on Ubuntu 11.10", "position": "back-end" },
{ "text": "fixed Java API build (not sure if features2d is wrapped correctly now)", "position": "back-end" },
{ "text": "put all old stitching API into detail namespace", "position": "back-end" },
{ "text": "peopledetect.py sample added (TODO: use builtin svm data instead of people_hog.txt) some old cv api use cleaning", "position": "back-end" },
{ "text": "KeyPoint converters from/to Mat", "position": "back-end" },
{ "text": "pointers handling fixed, KeyPoint manual port added", "position": "back-end" },
{ "text": "script to find Java API methods that not covered by auto-generated JUnit stubs", "position": "back-end" },
{ "text": "refactored manual const and funcs handling, collected real 'import' needs for java classes (to eliminate eclipse warnings in java classes)", "position": "back-end" },
{ "text": "updated CvException class path", "position": "back-end" },
{ "text": "class properties support added", "position": "back-end" },
{ "text": "fixed consts generation", "position": "back-end" },
{ "text": "Java API packages restructured (require further changes in CMake part to work)", "position": "back-end" },
{ "text": "implementation of vector<> fixed", "position": "back-end" },
{ "text": "Added functions required for Java API wrappers generating converting Mat-s to/from vectors.", "position": "back-end" },
{ "text": "implementation of vector<Point> support", "position": "back-end" },
{ "text": "Java API generator improvements: - fixed return of complex types (Scalar, Point, etc) - partial implementation of vector<> support (empty stubs for CPP-side converters)", "position": "back-end" },
{ "text": "partial vector<> support in Java API generator", "position": "back-end" },
{ "text": "- partial 'vector' support in Java API generator - const ignore mask list added for Java API generator", "position": "back-end" },
{ "text": "class ignore list added for Java API generator", "position": "back-end" },
{ "text": "funcs ignore list added for Java API generator", "position": "back-end" },
{ "text": "Added to Java API classes Range and CvSlice.", "position": "back-end" },
{ "text": "- 'c_string' support added to Java API - improved CV_IN_OUT/CV_OUT handling for generated Python/Java wrappers", "position": "back-end" },
{ "text": "Javadoc comments genearion is integrated into the Java API build", "position": "back-end" },
{ "text": "Turned off android camera and java wrappers for low Android API levels (android-8 is required for these components)", "position": "back-end" },
{ "text": "Added new Android sample (Java API + Native)", "position": "back-end" },
{ "text": "Added video.hpp header (for convenience with other modules); added option to specify list of headers for Java API generator", "position": "back-end" },
{ "text": "work on obj_detect.py added square_size cmd line param for calibrate.py added _coverage.py script to compute cv2 api coverage by samples (just for interest, may be removed later)", "position": "back-end" },
{ "text": "fixed calibrateCamera API (ticket #1143)", "position": "back-end" },
{ "text": "started work on API & doc synchronization (in particular, Mat& => Input/OutputArray in the descriptions)", "position": "back-end" },
{ "text": "modified according to CUDA 4.0 API updates", "position": "back-end" },
{ "text": "Fixed Android API level detection for toolchain build", "position": "back-end" },
{ "text": "extended libdc1394 backend (the patch is by Michael Joachimiak)", "position": "back-end" },
{ "text": "modified according to NPP for CUDA 3.2 API updates.", "position": "back-end" },
{ "text": "Qt backend development: Fixed CMake cached variables", "position": "back-end" },
{ "text": "doxygenated core and imgproc modules (C++ API only)", "position": "back-end" },
{ "text": "Update GPURenderPipeline::Create descriptor conversion to match Dawn API changes", "position": "back-end" },
{ "text": "Use mojo api in ash::NetworkFeaturePodController", "position": "back-end" },
{ "text": "[iOS] Update API used to get available storage space", "position": "back-end" },
{ "text": "[Extensions + Apps] Move the firstRunPrivate API to platform_apps", "position": "back-end" },
{ "text": "[sms] Restrict SMS Receiver API to Top Level Frames in Browser Process", "position": "back-end" },
{ "text": "Improve API for contrast blending functions.", "position": "back-end" },
{ "text": "Reland: Port automation api js focus computations to C++", "position": "back-end" },
{ "text": "ime: Add ime API for changing the composition range.", "position": "back-end" },
{ "text": "Port automation api js focus computations to C++", "position": "back-end" },
{ "text": "[remoting][IT2ME] Use MuxingSignalStrategy and new registration API for non-delegated codepath", "position": "back-end" },
{ "text": "Convert AccountTrackerService api to use CoreAccountId instead of std::string", "position": "back-end" },
{ "text": "Convert IdentityManager api to use CoreAccountId instead of std::string", "position": "back-end" },
{ "text": "media/gpu/v4l2svda: fix stateless API specification violation", "position": "back-end" },
{ "text": "Media Capabilities: enable API on workers.", "position": "back-end" },
{ "text": "Revoke only old backend that uses video decoder.", "position": "back-end" },
{ "text": "Use new shmem API in PPB_ImageData_Impl", "position": "back-end" },
{ "text": "Improve NTPCatalog::create API and implementation", "position": "back-end" },
{ "text": "Update to use the new remoting API keys", "position": "back-end" },
{ "text": "[sms] Restrict SMS Receiver API to Top Level Frames", "position": "back-end" },
{ "text": "[App Management] Change fake backend apps to have descriptive titles.", "position": "back-end" },
{ "text": "Remove Bookmark Manager API permissions, and clean up EnhancedBookmarkKeyService.", "position": "back-end" },
{ "text": "[GID] Adjust ToolbarManager API to allow updating image of experimental button.", "position": "back-end" },
{ "text": "Cleanup Event router fail safes.", "position": "back-end" },
{ "text": "Fixed FileSystem API to work with large files.", "position": "back-end" },
{ "text": "Add an Account Manager API to remove accounts by email", "position": "back-end" },
{ "text": "[pieswasm] change Module.image() api to return the result", "position": "back-end" },
{ "text": "[PiP V2] Add new API to Blink", "position": "back-end" },
{ "text": "[LayoutNG] Reduce API surface of physical fragments.", "position": "back-end" },
{ "text": "Use Skia API in a cleaner way.", "position": "back-end" },
{ "text": "Move extension automation api to /extensions", "position": "back-end" },
{ "text": "Make ATK text selection API hypertext-aware", "position": "back-end" },
{ "text": "Media Engagement: use url::Origin in the internal API instead of GURL.", "position": "back-end" },
{ "text": "Enable in memory file system API support for incognito.", "position": "back-end" },
{ "text": "Use new TelephonyManager API on Q", "position": "back-end" },
{ "text": "Allow runtime.onConnectNative API on all channels", "position": "back-end" },
{ "text": "Don't send location API navigations through NavigationScheduler", "position": "back-end" },
{ "text": "[cleanup] Reduce API surface of ShapeOutsideInfo.", "position": "back-end" },
{ "text": "remoting: Add host name for One Platform API endpoint.", "position": "back-end" },
{ "text": "Notification scheduler: Cache API calls before initialization is done.", "position": "back-end" },
{ "text": "Remove setAudioExperiments extension API function.", "position": "back-end" },
{ "text": "Use DWrite backend for variable fonts when possible", "position": "back-end" },
{ "text": "Fix selection API behavior just after input type change", "position": "back-end" },
{ "text": "Use dedicate status API for voice enrollment status", "position": "back-end" },
{ "text": "Bypass Blink API in platform/crypto.h digest implementation.", "position": "back-end" },
{ "text": "[opus] Apply patch with API for checking whether the encoder is in DTX", "position": "back-end" },
{ "text": "Fix API to get correct rounded corner bounding box", "position": "back-end" },
{ "text": "boringssl: Re-enable deprecated API usage warnings.", "position": "back-end" },
{ "text": "Use layer rounded corner API instead of mask layer for clipping.", "position": "back-end" },
{ "text": "Use layer corner radius API for clipping rather than mask layer.", "position": "back-end" },
{ "text": "Introduced workaround 1 of 2 in the new selection API so that it works correctly on ChromeOS", "position": "back-end" },
{ "text": "Parse SEND_TAB_TO_SELF entries in backend sequence", "position": "back-end" },
{ "text": "Parse DeviceInfo protos in backend thread", "position": "back-end" },
{ "text": "Using backend file utils to replace getExtension in rename dialogs", "position": "back-end" },
{ "text": "use bitmap.makeShader: skia api change", "position": "back-end" },
{ "text": "Parse session sync protos on backend thread", "position": "back-end" },
{ "text": "Add BrowserList::IsIncognitoSessionInUse API function.", "position": "back-end" },
{ "text": "add flag to stage API change in skia (colorfilter factories)", "position": "back-end" },
{ "text": "add flag to stage skia api change", "position": "back-end" },
{ "text": "Use SkRRect transform API to apply transform", "position": "back-end" },
{ "text": "DevTools: prepare inspect mode backend for relative spacing", "position": "back-end" },
{ "text": "Remove the deprecated UpdateSourceURL() API in VR", "position": "back-end" },
{ "text": "add flag to stage api change to SkShader tilemodes", "position": "back-end" },
{ "text": "devtools/tracing: Support perfetto backend + proto output.", "position": "back-end" },
{ "text": "Revoke api permission for old extensions", "position": "back-end" },
{ "text": "Add DCHECKS to ensure content settings API isn't used with resource id", "position": "back-end" },
{ "text": "Polish TabGrid UI on API 19-22", "position": "back-end" },
{ "text": "CacheStorage: Split backend objects into separate interface/impl classes.", "position": "back-end" },
{ "text": "SimpleCache: Check for dead backend in SimpleIterator::OpenNextEntry", "position": "back-end" },
{ "text": "Remove features::kExperimentalUi from Media Router Code", "position": "back-end" },
{ "text": "Add Downloader API to IME decoder shared header.", "position": "back-end" },
{ "text": "Ash Tray: Use new layer rounded corner API for tray bubbles.", "position": "back-end" },
{ "text": "[Chromecast] Add screen refresh rate in millihertz API in AvSettings", "position": "back-end" },
{ "text": "SimpleCache: entry_struct->created isn't guaranteed safe after backend death", "position": "back-end" },
{ "text": "Switch to the new JSONReader API in ui/.", "position": "back-end" },
{ "text": "Add new API isSpecialUser in LocaleManager", "position": "back-end" },
{ "text": "[ExploreSites][Touchless]: Link backend site suggestions data into most likely carousel.", "position": "back-end" },
{ "text": "Call platform API for fallback cursor mode.", "position": "back-end" },
{ "text": "Update API to take VideoSourceProviderRequest...", "position": "back-end" },
{ "text": "AppCache: fix a race when registering new backend on navigation", "position": "back-end" },
{ "text": "[scheduler] Ui thread task posting API changes.", "position": "back-end" },
{ "text": "IdentityManager: Remove legacy API call from InlineLoginHandlerImpl", "position": "back-end" },
{ "text": "[Chromecast][BLE] Queue disconnect requests and add API DisconnectAll", "position": "back-end" },
{ "text": "Update UI layer API for rounded corner and fast rounded corner", "position": "back-end" },
{ "text": "Notification: Use new API for several notification types.", "position": "back-end" },
{ "text": "Notification: Use new API for media notification.", "position": "back-end" },
{ "text": "Notification: Use new API for media capture and sync notification.", "position": "back-end" },
{ "text": "Setup API for fast rounded corner path", "position": "back-end" },
{ "text": "Add API to SharedQuadState to set rounded corner bounds", "position": "back-end" },
{ "text": "[idle] Restrict the Idle Detection API to top-level frames", "position": "back-end" },
{ "text": "Android: Factor out TabState API from Tab", "position": "back-end" },
{ "text": "[idle] Verify that the Idle Detection API works under a variety of corner cases.", "position": "back-end" },
{ "text": "Replacing downloads backend with DownloadOfflineContentProvider", "position": "back-end" },
{ "text": "gpu: Using new API to get RGB emulation texture id directly.", "position": "back-end" },
{ "text": "Update ImageWriter API to handle cases with ExternalStorageDisabled and ExternalStorageReadOnly policies are used.", "position": "back-end" },
{ "text": "Adding feature flag for enabling OnePlatform API hints and created a Top Site Provider for querying SiteEngagementService", "position": "back-end" },
{ "text": "Update public API of ModelListAdapter to be more generic", "position": "back-end" },
{ "text": "Perfetto: Use the Consumer::ChangeTraceConfig API to add new PIDs to trace", "position": "back-end" },
{ "text": "Automation API should include image labeling AXMode", "position": "back-end" },
{ "text": "Remove public browserState API from Tab", "position": "back-end" },
{ "text": "Clean up Jelly Bean API compatibility code.", "position": "back-end" },
{ "text": "android: crazy_linker: Simplify device API level detection", "position": "back-end" },
{ "text": "Introduce API in ui::Layers for setting rounded corners", "position": "back-end" },
{ "text": "[STTS] move navigation time from client API into the bridge", "position": "back-end" },
{ "text": "Fixed bug where calling speak immediately after cancel would fail. The problem was that the windows speech API expects a NULL argument when only clearing the queue, otherwise it will try to speak the word given after flushing the queue, even if the word is an empty string.", "position": "back-end" },
{ "text": "Update chrome.dashboardPrivate API match", "position": "back-end" },
{ "text": "arc: Change wakeup timers implementation to adapt to new API semantics", "position": "back-end" },
{ "text": "Expose more API in SimpleDependencyFactory.", "position": "back-end" },
{ "text": "Android: Split out media router from chrome_java", "position": "back-end" },
{ "text": "[piexwasm] Add Piex Wasm reader exposing an image() read API to JS", "position": "back-end" },
{ "text": "Update LearningTaskController API for feature snapshots.", "position": "back-end" },
{ "text": "[Feed] Implement spinner related API in BasicLoggingApi", "position": "back-end" },
{ "text": "power: Add wrapper class for wake up alarms API on Chrome OS", "position": "back-end" },
{ "text": "WakeLock: Add mojo observer API for wake locks", "position": "back-end" },
{ "text": "Adds image annotation to the Automation API and Chromevox.", "position": "back-end" },
{ "text": "Replaced 'Should' with 'Will' per Android API council guidance", "position": "back-end" },
{ "text": "[ios] add FormData extraction api to password form helper", "position": "back-end" },
{ "text": "Blink: Refactor ImageDecoder::DecodeToYUV API to be analagous to Decode.", "position": "back-end" },
{ "text": "[Cros SR] Expand and refactor the training API of app_list search-related classes.", "position": "back-end" },
{ "text": "add flag to stage API change", "position": "back-end" },
{ "text": "Android Notification: startForeground API in AppHooks.", "position": "back-end" },
{ "text": "[fuchsia] Add API to Frame for enabling and disabling user input.", "position": "back-end" },
{ "text": "Add base themes for overriding themes in higher API level", "position": "back-end" },
{ "text": "[base] Add flow trace events to pump API for watching file descriptors", "position": "back-end" },
{ "text": "[iOS] Adding API to search for an item based on its type in all sections", "position": "back-end" },
{ "text": "Make mojoPrivate API support Chrome Camera App", "position": "back-end" },
{ "text": "Image annotation service: provide Google API key in requests to server.", "position": "back-end" },
{ "text": "Android notification: use new API for content suggestion notification.", "position": "back-end" },
{ "text": "Cleanup BackendDelegate and Backend ownership in HistoryService.", "position": "back-end" },
{ "text": "Adding a flag to enable faster reporting API reports", "position": "back-end" },
{ "text": "Android: Remove top/bottom controls state API from Tab", "position": "back-end" },
{ "text": "Makes Badging API accessible on Windows", "position": "back-end" },
{ "text": "sensors: Fix API typo (magnitometer -> magnetometer)", "position": "back-end" },
{ "text": "Android: Factor printing API out of Tab", "position": "back-end" },
{ "text": "Android notification: use new API for offlinepage download notification.", "position": "back-end" },
{ "text": "Implement getReferrerChain API for safeBrowsingPrivate", "position": "back-end" },
{ "text": "[Content API Cleanup] Move some implementation from content/public/renderer to content/renderer", "position": "back-end" },
{ "text": "Add remoting FTL API key", "position": "back-end" },
{ "text": "Always call into in-product help backend upon new tab opening", "position": "back-end" },
{ "text": "fido: support caBLE on Windows with the native API present", "position": "back-end" },
{ "text": "Improve AccountReconcilor API usage in AccountManagerMigrator", "position": "back-end" },
{ "text": "Implement surrounding text API for exo::TextInput", "position": "back-end" },
{ "text": "Fix blob URLs in the chrome.downloads API with network service enabled.", "position": "back-end" },
{ "text": "[AppCache] Move frontend instance from dispatcher host to backend impl.", "position": "back-end" },
{ "text": "Fix accessibility API mappings for the 'address' element", "position": "back-end" },
{ "text": "Contacts Picker: Restrict contacts.select() API to main frame.", "position": "back-end" },
{ "text": "Set Feature Policy JS API to stable", "position": "back-end" },
{ "text": "[scheduler] Changing the UiThreadTaskTraits API to be static.", "position": "back-end" },
{ "text": "Add a GpuBenchmarking API to register a callback for SwapCompletion.", "position": "back-end" },
{ "text": "CryptAuth v2 Enrollment API calls", "position": "back-end" },
{ "text": "Fix race between Credential API and NewPasswordFormManager.", "position": "back-end" },
{ "text": "[NTP] Add API for search suggestion selected", "position": "back-end" },
{ "text": "[caching] Use V8 WASM caching API in Blink", "position": "back-end" },
{ "text": "Remove v0 API privilege for DevTools", "position": "back-end" },
{ "text": "Download notification: use new ChromeNotificationBuilder API for metrics.", "position": "back-end" },
{ "text": "Add an API for plumbing screenshots from C++ -> Java", "position": "back-end" },
{ "text": "base: Enable SequenceManager backend in MessageLoop by default", "position": "back-end" },
{ "text": "Remove showOffers and associated private api calls from banners.js", "position": "back-end" },
{ "text": "[Media Session] Enable API on desktop (all)", "position": "back-end" },
{ "text": "Feature Policy JS API Update: Add document.featurePolicy.features", "position": "back-end" },
{ "text": "Hook up the Contact API with the Origin Trials framework", "position": "back-end" },
{ "text": "Service API for HostResolver MDNS listener", "position": "back-end" },
{ "text": "Align the Contact API with the proposal", "position": "back-end" },
{ "text": "Remove unwanted strokes from Media Router icons", "position": "back-end" },
{ "text": "[Media Session] Enable API on desktop", "position": "back-end" },
{ "text": "[Layered API] Compress Layered API scripts", "position": "back-end" },
{ "text": "s13n: Add legacy API to replace AccountTrackerService::PickAccountIdForAccount", "position": "back-end" },
{ "text": "s13n: Add a new API to replace AccountTrackerService::Observer::OnAccountRemoved", "position": "back-end" },
{ "text": "Renames Badge api to ExperimentalBadge for OriginTrial", "position": "back-end" },
{ "text": "Add generate script for Layered API resource grdp/h files.", "position": "back-end" },
{ "text": "Add API to replace AccountTrackerService::SetMigrationDone", "position": "back-end" },
{ "text": "Add API to replace ATS::{IsMigrationSupported,GetMigrationState}", "position": "back-end" },
{ "text": "Add API to replace ATS::{SetIsChildAccount,SetIsAdvancedProtectionAccount}", "position": "back-end" },
{ "text": "Implement an AccoutsMutator API for invalidating refresh token of the primary account", "position": "back-end" },
{ "text": "[jumbo] interface is a Windows API macro so avoid that name", "position": "back-end" },
{ "text": "[Chromecast] Wait until the real backend is initialized to call SetVolume", "position": "back-end" },
{ "text": "[fuchsia] Implement Cast Channel API using Connector/MessagePort.", "position": "back-end" },
{ "text": "[Cronet] Add API methods to attach RequestFinishedInfoListeners.", "position": "back-end" },
{ "text": "Android notification: Add setContentIntent API with metric tracking.", "position": "back-end" },
{ "text": "[signin] Cleanup embedded URL API in signin_promo", "position": "back-end" },
{ "text": "add SK_SUPPORT_LEGACY_PAINT_FLAGS flag for api staging", "position": "back-end" },
{ "text": "[iOS] Factor session window API into a protocol.", "position": "back-end" },
{ "text": "Implementation of USS sync backend for Send Tab to Device feature", "position": "back-end" },
{ "text": "[Explore sites]: Modify backend tasks to read from new activity table", "position": "back-end" },
{ "text": "Refine UbertokenFetcher API surface to work similarly to identity::AccessTokenFetcher", "position": "back-end" },
{ "text": "Increase the CCT module API version to 9", "position": "back-end" },
{ "text": "Added missing fields to the function parsing a legacy Autofill server request to a new API request.", "position": "back-end" },
{ "text": "[App Management] Link UI to backend permissions.", "position": "back-end" },
{ "text": "Hook up Blink's Windows font backend to font unique name matching", "position": "back-end" },
{ "text": "Android: Remove min/target api in gradle manifest", "position": "back-end" },
{ "text": "Adds Badge API measurements", "position": "back-end" },
{ "text": "Feature Policy JS API Update: policy => featurePolicy", "position": "back-end" },
{ "text": "Increase scope of URLLoader::FollowRedirect() API implementation.", "position": "back-end" },
{ "text": "[Extensions] Add API function to delete all activities by extension id", "position": "back-end" },
{ "text": "Add use counter for more ~high entropy API calls.", "position": "back-end" },
{ "text": "Pass raw fuzz input instead of string::c_str when API does not require null terminator.", "position": "back-end" },
{ "text": "WakeLock: Add observer API for wake lock implementation", "position": "back-end" },
{ "text": "Make //ui/base/idle API synchronous", "position": "back-end" },
{ "text": "Add a link for how to enable API in developers console.", "position": "back-end" },
{ "text": "AWS: Configure minion routes dynamically", "position": "back-end" },
{ "text": "Refactor cloud route interface, to avoid assumption that routes are named", "position": "back-end" },
{ "text": "update the api conversion tool to v1", "position": "back-end" },
{ "text": "Passing memory swap limit -1 by default. Docker remote API never check if memory swap is enabled by kernel or not, instead by default to set the limit to memory * 2, and return API error 500 if swap is not enabled.", "position": "back-end" },
{ "text": "Add tunnelling to the proxy API handler.", "position": "back-end" },
{ "text": "make v1 the preferred api version", "position": "back-end" },
{ "text": "Delete deprecated API versions", "position": "back-end" },
{ "text": "Optionally use a github api token when compiling relase-notes", "position": "back-end" },
{ "text": "Change reference to downward api pod to link in doc", "position": "back-end" },
{ "text": "Change v1 API to default RC replicas to 1", "position": "back-end" },
{ "text": "Add admission control to the Connect method in the API Server", "position": "back-end" },
{ "text": "Don't rename api imports in conversions", "position": "back-end" },
{ "text": "Add API change suggestions.", "position": "back-end" },
{ "text": "Updating /cluster to use v1beta 3 specs, and change a lot of polling to healthz instead of api endpoints.", "position": "back-end" },
{ "text": "Inconsistency in api terminology of pod conditions", "position": "back-end" },
{ "text": "Add ServiceAccount API type, client", "position": "back-end" },
{ "text": "bring doc up to date with actual api types", "position": "back-end" },
{ "text": "Make the API server deal with HEAD requests", "position": "back-end" },
{ "text": "Adds a simple release-note builder that scrapes the Github API for recent PRs.", "position": "back-end" },
{ "text": "Update examples/meteor to use API v1beta3", "position": "back-end" },
{ "text": "update logging-demo to use API v1beta3; modify the way to access Elasticsearch and Kibana services", "position": "back-end" },
{ "text": "Throw an API error when deleting namespace in termination", "position": "back-end" },
{ "text": "update the hazelcast example to API version v1beta3", "position": "back-end" },
{ "text": "Add step to API changes doc for swagger regen", "position": "back-end" },
{ "text": "revert back INFLUXDB_EXTERNAL_URL to api v1beta1", "position": "back-end" },
{ "text": "Fixing hooks/description to catch API fields without description tags", "position": "back-end" },
{ "text": "Adding events API to cadvisor interface.", "position": "back-end" },
{ "text": "Fix downward API descriptions", "position": "back-end" },
{ "text": "Add downward API for environment vars", "position": "back-end" },
{ "text": "Add hint re: fuzzer to api changes doc", "position": "back-end" },
{ "text": "update examples/cassandra to api v1beta3", "position": "back-end" },
{ "text": "E2E: Add Api Server option to kubectl", "position": "back-end" },
{ "text": "Add Connecter storage interface to API server", "position": "back-end" },
{ "text": "Updated API conventions and other details, per #6133.", "position": "back-end" },
{ "text": "Refactored Volume plugins to use InternalVolume instead of API types", "position": "back-end" },
{ "text": "Fix a small regression on api server proxy after switch to v1beta3.", "position": "back-end" },
{ "text": "use api convention", "position": "back-end" },
{ "text": "Improve the output of the swagger API for watch events", "position": "back-end" },
{ "text": "Removed ancient api doc files.", "position": "back-end" },
{ "text": "Changing the case of API to be consistent with surrounding uses.", "position": "back-end" },
{ "text": "Added a catchall to set api server ip address in kubelet cmd params", "position": "back-end" },
{ "text": "Add a pointer to kubernetes-dev to API changes doc.", "position": "back-end" },
{ "text": "PersistentVolume & PersistentVolumeClaim API types", "position": "back-end" },
{ "text": "Adding cAdvisor API to get image usage information.", "position": "back-end" },
{ "text": "Sync static pods from Kubelet to the API server", "position": "back-end" },
{ "text": "Kube release and API versioning policy", "position": "back-end" },
{ "text": "Add a doc explaining how to make API changes", "position": "back-end" },
{ "text": "Remove monitoring firewall setup methods. Heapster anf Grafana are now accessible via the API server proxy.", "position": "back-end" },
{ "text": "Sync replication count with the api server on pod creation/deletion.", "position": "back-end" },
{ "text": "coreos/azure: Point kublet and proxy at API server instead of etcd", "position": "back-end" },
{ "text": "Rename cAdvisor info API to cadvisorApi", "position": "back-end" },
{ "text": "Replace the use of kubectl proxy with a standard api client.", "position": "back-end" },
{ "text": "Skip types that are not registered on an API version", "position": "back-end" },
{ "text": "validate api version in kubectl --patch and --override.", "position": "back-end" },
{ "text": "v1beta3 api json for grafana example", "position": "back-end" },
{ "text": "v1beta3 api yaml files", "position": "back-end" },
{ "text": "Update examples to support v1beta3 api - liveness/mysql-wordpress", "position": "back-end" },
{ "text": "v1beta3 api yaml files-hazelcast", "position": "back-end" },
{ "text": "Secret API resource", "position": "back-end" },
{ "text": "Add extra explanation of the purpose of service's ContainerPort field to the API comments. We were asked about this in issue #4332.", "position": "back-end" },
{ "text": "Improve error handling for '/containerLogs' API in kubelet.", "position": "back-end" },
{ "text": "Modify nginx port to avoid collision with api server", "position": "back-end" },
{ "text": "Configurable API prefix for kubectl proxy", "position": "back-end" },
{ "text": "Fixed API server portal_net flag that could break service networking by setting an IP from a subnet allocated to a node.", "position": "back-end" },
{ "text": "Deleting the API objects related to /operations", "position": "back-end" },
{ "text": "clarify api request information", "position": "back-end" },
{ "text": "Factor out API defaulting from validation logic", "position": "back-end" },
{ "text": "Increase API rate limit on read only port of apiserver", "position": "back-end" },
{ "text": "Refactor API object fuzzer", "position": "back-end" },
{ "text": "Parameterize API rate limits for apiserver", "position": "back-end" },
{ "text": "The API server setup logging is debug specific, bump above V(4)", "position": "back-end" },
{ "text": "Enable v1beta3 API via --runtime_config=api/v1beta3 flag", "position": "back-end" },
{ "text": "contrib/podex: use registry API to resolve image metadata", "position": "back-end" },
{ "text": "Make RESTClient more generic to API version, simplify version handling", "position": "back-end" },
{ "text": "Add EventSource to api to have both Component and Host information.", "position": "back-end" },
{ "text": "Automatically serve API on https with self-signed cert", "position": "back-end" },
{ "text": "Add kubelet DNS flags & api disable for DNS", "position": "back-end" },
{ "text": "Updated types API to include session affinity. … - changed CLIENT-IP and NONE to be ClientIP and None respectively - updated conversions to support translating between api versions. - updated validations to validate session affinity type if specified.", "position": "back-end" },
{ "text": "Make Swagger API support optional, so that consumers can define their own", "position": "back-end" },
{ "text": "Fix the kubelet uses api encode/decode by actually adding PodContainerInfo to v1beta1", "position": "back-end" },
{ "text": "Add an api object for the kubelet, and a versioned endpoint.", "position": "back-end" },
{ "text": "Remove duplicated assignment from API conversion", "position": "back-end" },
{ "text": "Add node status to API object (all versions).", "position": "back-end" },
{ "text": "Add 'nodes' everywhere 'minions' can be used in api / cli", "position": "back-end" },
{ "text": "Shrink runtime.TypeMeta to be equivalent to api TypeMeta", "position": "back-end" },
{ "text": "Document API doc path.", "position": "back-end" },
{ "text": "add utility for binding flags and building api server clients", "position": "back-end" },
{ "text": "Add descriptions to all v1beta1 API fields.", "position": "back-end" },
{ "text": "Add the container API to our dependencies. Update google-api-go-client", "position": "back-end" },
{ "text": "Automatic API generation by adopting go-restful", "position": "back-end" },
{ "text": "Give the API server access to TLS certs.", "position": "back-end" },
{ "text": "Refactor PodStatus to PodCondition in internal API for v1beta3", "position": "back-end" },
{ "text": "Introduce ObjectConvertor for conversion to known API versions", "position": "back-end" },
{ "text": "Add some blocking so that we don't generate identical UUIDs for API objects.", "position": "back-end" },
{ "text": "Rename api ErrorList for clarity", "position": "back-end" },
{ "text": "make api match intent with less specific type", "position": "back-end" },
{ "text": "Use etcd as backend for minion registry.", "position": "back-end" },
{ "text": "Initial support of propogating the termination reasons and image failure to apiserver. Deprecated docker.Container from API completely.", "position": "back-end" },
{ "text": "Allow server and client to take api version as argument", "position": "back-end" },
{ "text": "Expose v1beta2 API group", "position": "back-end" },
{ "text": "Add v1beta2 API objects", "position": "back-end" }
]